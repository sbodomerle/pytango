#LyX 1.5.3 created this file. For more info see http://www.lyx.org/
\lyxformat 276
\begin_document
\begin_header
\textclass article
\begin_preamble
\usepackage{multirow}

\evensidemargin -.5cm
\oddsidemargin -.5cm
\topmargin -1.5cm
\textwidth 17cm
\textheight 25cm

\newtheorem{example}{Example}[section]
\end_preamble
\language english
\inputencoding auto
\font_roman default
\font_sans default
\font_typewriter default
\font_default_family default
\font_sc false
\font_osf false
\font_sf_scale 100
\font_tt_scale 100
\graphics default
\paperfontsize default
\papersize default
\use_geometry false
\use_amsmath 1
\use_esint 0
\cite_engine basic
\use_bibtopic false
\paperorientation portrait
\secnumdepth 3
\tocdepth 3
\paragraph_separation indent
\defskip medskip
\quotes_language english
\papercolumns 1
\papersides 1
\paperpagestyle default
\tracking_changes false
\output_changes false
\author "" 
\author "" 
\end_header

\begin_body

\begin_layout Title

\series bold
PyTango:
\series default

\newline
 Python bindings for Tango 
\newline
 v.3.0.4
\end_layout

\begin_layout Author
M.
 Ounsy, A.
 Buteau, V.Forchı̀, E.
 Taurel, T.
 Coutinho
\end_layout

\begin_layout Standard
\align center
History of modifications 
\end_layout

\begin_layout Standard
\begin_inset Tabular
<lyxtabular version="3" rows="12" columns="4">
<features>
<column alignment="center" valignment="top" leftline="true" rightline="true" width="0pt">
<column alignment="center" valignment="top" rightline="true" width="0pt">
<column alignment="center" valignment="top" rightline="true" width="0pt">
<column alignment="center" valignment="top" rightline="true" width="0pt">
<row topline="true" bottomline="true">
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Standard
Date 
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Standard
 Revision 
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Standard
 Description 
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Standard
 Author
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Standard
18/07/03 
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Standard
 1.0 
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Standard
 Initial Version 
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Standard
 M.
 Ounsy
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Standard
 6/10/03 
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Standard
 2.0 
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Standard
 Extension of the "Getting Started" paragraph 
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Standard
 A.
 Buteau/M.
 Ounsy
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Standard
 14/10/03 
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Standard
 3.0 
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Standard
 Added Exception Handling paragraph 
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Standard
 M.
 Ounsy
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Standard
 13/06/05 
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Standard
 4.0 
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Standard
 Ported to LaTeX, added events, AttributeProxy and ApiUtil 
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Standard
 V.
 Forchı̀
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Standard

 
\backslash
multirow{2}{*}{13/06/05}
\end_layout

\end_inset


\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Standard

 
\backslash
multirow{2}{*}{4.1}
\end_layout

\end_inset


\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Standard
 Fixed bug with python 2.4 and state events 
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Standard
\begin_inset ERT
status collapsed

\begin_layout Standard

 
\backslash
multirow{2}{*}{V.
 Forch
\backslash
`{i}}
\end_layout

\end_inset


\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" bottomline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Standard

\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" bottomline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Standard

\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" bottomline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Standard
 new Database constructor 
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" bottomline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Standard
 
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" bottomline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Standard
15/01/06
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" bottomline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Standard
5.0
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" bottomline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Standard
Added Device Server classes
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" bottomline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Standard
E.Taurel
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Standard
15/03/07
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Standard
6.0
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Standard
Added AttrInfoEx, AttributeConfig events, 64bits, write_attribute
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Standard
T.
 Coutinho
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Standard
21/03/07
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Standard
6.1
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Standard
Added groups
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Standard
T.
 Coutinho
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Standard
15/06/07
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Standard
6.2
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Standard
Added dynamic attributes doc
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Standard
E.
 Taurel
\end_layout

\end_inset
</cell>
</row>
<row bottomline="true">
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Standard
6/05/08
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Standard
7
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Standard
Update to Tango 6.1.
 Added DB methods, version info
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Standard
T.
 Coutinho
\end_layout

\end_inset
</cell>
</row>
</lyxtabular>

\end_inset


\end_layout

\begin_layout Standard
\begin_inset LatexCommand tableofcontents

\end_inset


\end_layout

\begin_layout Standard
\begin_inset ERT
status collapsed

\begin_layout Standard


\backslash
newpage
\end_layout

\end_inset


\end_layout

\begin_layout Section
Introduction
\end_layout

\begin_layout Standard
The python Tango binding is made accessible using the module 
\series bold
PyTango
\series default
.
 The PyTango python module implements the Python Tango Device and Database
 API mapping but also allow to write Tango device server using Python.
 It then allows access from Python environment to the Tango high level C++
 classes and structures (see 
\begin_inset Quotes eld
\end_inset

The TANGO Control system manual
\begin_inset Quotes erd
\end_inset

 for complete reference).
 If you want to write Tango device server in Python using this 
\series bold
PyTango
\series default
 module, you need Tango C++ library release 6.1 or above.
 If you simply need to write Python script which act as Tango client only,
 older releases of tango can be used.
\end_layout

\begin_layout Standard
These Tango high level C++ classes and structures are exported to Python
 using the Boost.python library (see http://boost.sourceforge.net).
 Details on how to install the boost library and generate the python PyTango
 module from source code are available in the Readme files of this packages.
\end_layout

\begin_layout Section
Getting started
\end_layout

\begin_layout Subsection
Binding Installation
\end_layout

\begin_layout Standard
To use the Python Binding, two dlls 
\shape italic
PyTango.pyd
\shape default
 and 
\shape italic
boost_python.dll
\shape default
 (on Windows) or 
\shape italic
PyTango.so
\shape default
 and 
\shape italic
libboost_python.so
\shape default
 (on Linux) have to be generated.
 See the package Readme files to find out how these libraries can be generated.
\end_layout

\begin_layout Subsection
A quick tour of client binding through real examples
\end_layout

\begin_layout Standard
To access Tango devices in your python script, the following line must be
 in the header of your script file (it's purpose is to import the Tango
 binding in the interpreter) 
\begin_inset ERT
status collapsed

\begin_layout Standard


\backslash
begin{verbatim}from PyTango import *
\backslash
end{verbatim}
\end_layout

\end_inset


\end_layout

\begin_layout Standard
You are now ready to execute your first PyTango script! 
\end_layout

\begin_layout Standard
\begin_inset ERT
status collapsed

\begin_layout Standard


\backslash
begin{example}
\end_layout

\begin_layout Standard

Test the connection to the Device and get it's current state.
 See test
\backslash
_ping
\backslash
_state.py.
\end_layout

\begin_layout Standard


\backslash
begin{verbatim}
\end_layout

\begin_layout Standard

from PyTango import *
\end_layout

\begin_layout Standard

import sys
\end_layout

\begin_layout Standard

import time
\end_layout

\begin_layout Standard

\end_layout

\begin_layout Standard

# Protect the script from Exceptions 
\end_layout

\begin_layout Standard

try:
\end_layout

\begin_layout Standard

        # Get proxy on the tangotest1 device
\end_layout

\begin_layout Standard

        print "Getting DeviceProxy "
\end_layout

\begin_layout Standard

        tangotest = DeviceProxy("tango/tangotest/1")
\end_layout

\begin_layout Standard

\end_layout

\begin_layout Standard

        # First use the classical command_inout way to execute the DevString
 command
\end_layout

\begin_layout Standard

        # (DevString in this case is a command of the TangoTest device)
\end_layout

\begin_layout Standard

\end_layout

\begin_layout Standard

        result= tangotest.command_inout("DevString", "First hello to device")
\end_layout

\begin_layout Standard

        print "Result of execution of DevString command=", result
\end_layout

\begin_layout Standard

\end_layout

\begin_layout Standard

        # the same with a Device specific command 
\end_layout

\begin_layout Standard

        result= tangotest.DevString("Second Hello to device")
\end_layout

\begin_layout Standard

        print "Result of execution of DevString command=", result
\end_layout

\begin_layout Standard

\end_layout

\begin_layout Standard

        # Please note that argin argument type is automagically managed
 by python
\end_layout

\begin_layout Standard

        result= tangotest.DevULong(12456)
\end_layout

\begin_layout Standard

        print "Result of execution of Status command=", result
\end_layout

\begin_layout Standard

\end_layout

\begin_layout Standard

# Catch Tango and Systems  Exceptions
\end_layout

\begin_layout Standard

except:
\end_layout

\begin_layout Standard

        print "Failed with exception !"
\end_layout

\begin_layout Standard

        print sys.exc_info()[0]
\end_layout

\begin_layout Standard


\backslash
end{verbatim}
\end_layout

\begin_layout Standard


\backslash
end{example}
\end_layout

\begin_layout Standard

\end_layout

\begin_layout Standard


\backslash
begin{example}
\end_layout

\begin_layout Standard

Execute commands with scalar arguments on a Device.
 
\backslash

\backslash
 See test
\backslash
_simple
\backslash
_commands.py.
\end_layout

\begin_layout Standard

As you can see in the following example, when scalar types are used, the
 Tango
\end_layout

\begin_layout Standard

binding automagically manages the data types, and writing scripts is quite
 easy.
\end_layout

\begin_layout Standard

\end_layout

\begin_layout Standard


\backslash
begin{verbatim}
\end_layout

\begin_layout Standard

tangotest = DeviceProxy("tango/tangotest/1")
\end_layout

\begin_layout Standard

\end_layout

\begin_layout Standard

# First use the classical command_inout way to execute the DevString command
\end_layout

\begin_layout Standard

# (DevString in this case is a command of the TangoTest device)
\end_layout

\begin_layout Standard

\end_layout

\begin_layout Standard

result= tangotest.command_inout("DevString", "First hello to device")
\end_layout

\begin_layout Standard

print "Result of execution of DevString command=", result
\end_layout

\begin_layout Standard

\end_layout

\begin_layout Standard

# the same with a Device specific command 
\end_layout

\begin_layout Standard

result= tangotest.DevString("Second Hello to device")
\end_layout

\begin_layout Standard

print "Result of execution of DevString command=", result
\end_layout

\begin_layout Standard

\end_layout

\begin_layout Standard

# Please note that argin argument type is automagically managed by python
\end_layout

\begin_layout Standard

result= tangotest.DevULong(12456)
\end_layout

\begin_layout Standard

print "Result of execution of Status command=", result
\end_layout

\begin_layout Standard


\backslash
end{verbatim}
\end_layout

\begin_layout Standard


\backslash
end{example}
\end_layout

\begin_layout Standard

\end_layout

\begin_layout Standard


\backslash
begin{example}
\end_layout

\begin_layout Standard

Execute commands with more complex types.
 
\backslash

\backslash
 See test
\backslash
_complex
\backslash
_commands.py.
\end_layout

\begin_layout Standard

In this case you have to use put your arguments data in the correct python
\end_layout

\begin_layout Standard

structures.
\end_layout

\begin_layout Standard

\end_layout

\begin_layout Standard


\backslash
begin{verbatim}
\end_layout

\begin_layout Standard

print "Getting DeviceProxy "
\end_layout

\begin_layout Standard

tango_test = DeviceProxy("tango/tangotest/1")
\end_layout

\begin_layout Standard

# The input argument is a DevVarLongStringArray
\end_layout

\begin_layout Standard

# so create the argin variable containing
\end_layout

\begin_layout Standard

# an array of longs and an array of strings
\end_layout

\begin_layout Standard

argin = ([1,2,3], ["Hello", "TangoTest device"])
\end_layout

\begin_layout Standard

\end_layout

\begin_layout Standard

result= tango_test.DevVarLongArray(argin)
\end_layout

\begin_layout Standard

print "Result of execution of DevVarLongArray command=", result
\end_layout

\begin_layout Standard


\backslash
end{verbatim}
\end_layout

\begin_layout Standard


\backslash
end{example}
\end_layout

\begin_layout Standard

\end_layout

\begin_layout Standard


\backslash
begin{example}
\end_layout

\begin_layout Standard

Reading and writing attributes: test
\backslash
_read
\backslash
_write
\backslash
_attributes.py
\end_layout

\begin_layout Standard

\end_layout

\begin_layout Standard


\backslash
begin{verbatim}
\end_layout

\begin_layout Standard

#Read a scalar attribute
\end_layout

\begin_layout Standard

scalar=tangotest.read_attribute("long_scalar")
\end_layout

\begin_layout Standard

print "attribute value", scalar.value
\end_layout

\begin_layout Standard

#Read a spectrum attribute
\end_layout

\begin_layout Standard

spectrum=tangotest.read_attribute("double_spectrum")
\end_layout

\begin_layout Standard

print "attribute value", spectrum.value
\end_layout

\begin_layout Standard

\end_layout

\begin_layout Standard

# Write a scalar attribute so use the scalar structure
\end_layout

\begin_layout Standard

print "Writing attributes"
\end_layout

\begin_layout Standard

\end_layout

\begin_layout Standard

# Write a scalar attribute so use the scalar structure
\end_layout

\begin_layout Standard

scalar.value = 18
\end_layout

\begin_layout Standard

print "attribute scalar  ", scalar
\end_layout

\begin_layout Standard

print "Writing scalar attributes"
\end_layout

\begin_layout Standard

tangotest.write_attribute(scalar)
\end_layout

\begin_layout Standard

\end_layout

\begin_layout Standard

# Write a scalar attribute so use the scalar structure
\end_layout

\begin_layout Standard

spectrum.value = [1.2,3.2,12.3]
\end_layout

\begin_layout Standard

print "attribute spectrum ", spectrum
\end_layout

\begin_layout Standard

print "Writing spectrum attributes"
\end_layout

\begin_layout Standard

tangotest.write_attribute(spectrum)
\end_layout

\begin_layout Standard


\backslash
end{verbatim}
\end_layout

\begin_layout Standard


\backslash
end{example}
\end_layout

\begin_layout Standard

\end_layout

\begin_layout Standard


\backslash
begin{example}Defining devices in the Tango DataBase.
 See test
\backslash
_device
\backslash
_creation.py.
\end_layout

\begin_layout Standard

\end_layout

\begin_layout Standard


\backslash
begin{verbatim}
\end_layout

\begin_layout Standard

#  A reference on the DataBase
\end_layout

\begin_layout Standard

db = Database()
\end_layout

\begin_layout Standard

\end_layout

\begin_layout Standard

# The 3 devices name we want to create
\end_layout

\begin_layout Standard

# Note: these 3 devices will be served by the same DServer
\end_layout

\begin_layout Standard

new_device_name1="px1/tdl/mouse1"
\end_layout

\begin_layout Standard

new_device_name2="px1/tdl/mouse2"
\end_layout

\begin_layout Standard

new_device_name3="px1/tdl/mouse3"
\end_layout

\begin_layout Standard

\end_layout

\begin_layout Standard

# Define the Tango Class served by this  DServer
\end_layout

\begin_layout Standard

new_device_info_mouse = DbDevInfo()
\end_layout

\begin_layout Standard

new_device_info_mouse._class = "Mouse"
\end_layout

\begin_layout Standard

new_device_info_mouse.server = "ds_Mouse/server_mouse"
\end_layout

\begin_layout Standard

\end_layout

\begin_layout Standard

# add the first device
\end_layout

\begin_layout Standard

print "Creation Device:" , new_device_name1
\end_layout

\begin_layout Standard

new_device_info_mouse.name = new_device_name1
\end_layout

\begin_layout Standard

db.add_device(new_device_info_mouse)
\end_layout

\begin_layout Standard

\end_layout

\begin_layout Standard

# add the next device
\end_layout

\begin_layout Standard

print "Creation Device:" , new_device_name2
\end_layout

\begin_layout Standard

new_device_info_mouse.name = new_device_name2
\end_layout

\begin_layout Standard

db.add_device(new_device_info_mouse)
\end_layout

\begin_layout Standard

# add the third device
\end_layout

\begin_layout Standard

print "Creation Device:" , new_device_name3
\end_layout

\begin_layout Standard

new_device_info_mouse.name = new_device_name3
\end_layout

\begin_layout Standard

db.add_device(new_device_info_mouse)
\end_layout

\begin_layout Standard


\backslash
end{verbatim}
\end_layout

\begin_layout Standard


\backslash
end{example}
\end_layout

\begin_layout Standard

\end_layout

\begin_layout Standard


\backslash
begin{example}
\end_layout

\begin_layout Standard

Setting up Device properties.
 See test
\backslash
_device
\backslash
_properties.py.
\end_layout

\begin_layout Standard


\backslash
end{example}
\end_layout

\begin_layout Standard

\end_layout

\begin_layout Standard


\backslash
begin{example}
\end_layout

\begin_layout Standard

A more complex example using python subtilities.
\end_layout

\begin_layout Standard

The following python script example (containing some functions and instructions
\end_layout

\begin_layout Standard

manipulating a Galil motor axis device server) gives an idea of how the
 Tango
\end_layout

\begin_layout Standard

API should be accessed from Python
\end_layout

\begin_layout Standard

\end_layout

\begin_layout Standard


\backslash
begin{verbatim}
\end_layout

\begin_layout Standard

# connecting to the motor axis device
\end_layout

\begin_layout Standard

axis1 = DeviceProxy ("microxas/motorisation/galilbox")
\end_layout

\begin_layout Standard

# Getting Device Properties 
\end_layout

\begin_layout Standard

property_names = ["AxisBoxAttachement",
\end_layout

\begin_layout Standard

                  "AxisEncoderType",
\end_layout

\begin_layout Standard

                  "AxisNumber",
\end_layout

\begin_layout Standard

                  "CurrentAcceleration",
\end_layout

\begin_layout Standard

                  "CurrentAccuracy",
\end_layout

\begin_layout Standard

                  "CurrentBacklash",
\end_layout

\begin_layout Standard

                  "CurrentDeceleration",
\end_layout

\begin_layout Standard

                  "CurrentDirection",
\end_layout

\begin_layout Standard

                  "CurrentMotionAccuracy",
\end_layout

\begin_layout Standard

                  "CurrentOvershoot",
\end_layout

\begin_layout Standard

                  "CurrentRetry",
\end_layout

\begin_layout Standard

                  "CurrentScale",
\end_layout

\begin_layout Standard

                  "CurrentSpeed",
\end_layout

\begin_layout Standard

                  "CurrentVelocity",
\end_layout

\begin_layout Standard

                  "EncoderMotorRatio",
\end_layout

\begin_layout Standard

                  "logging_level",
\end_layout

\begin_layout Standard

                  "logging_target",
\end_layout

\begin_layout Standard

                  "UserEncoderRatio",
\end_layout

\begin_layout Standard

                  "UserOffset"]
\end_layout

\begin_layout Standard

axis_properties = axis1.get_property(property_names)
\end_layout

\begin_layout Standard

for prop in axis_properties.keys():
\end_layout

\begin_layout Standard

print "%s: %s" % (prop,axis_properties[prop][0])
\end_layout

\begin_layout Standard

# Changing Properties
\end_layout

\begin_layout Standard

axis_properties["AxisBoxAttachement"] = ["microxas/motorisation/galilbox"]
\end_layout

\begin_layout Standard

axis_properties["AxisEncoderType"] = ["1"]
\end_layout

\begin_layout Standard

axis_properties["AxisNumber"] = ["6"]
\end_layout

\begin_layout Standard

axis1.put_property(axis_properties)
\end_layout

\begin_layout Standard

# Reading attributes and storing them in a python dictionary
\end_layout

\begin_layout Standard

att_dict = {}
\end_layout

\begin_layout Standard

att_list = axis.get_attribute_list()
\end_layout

\begin_layout Standard

for att in att_list:
\end_layout

\begin_layout Standard

    att_val = axis.read_attribute(att)
\end_layout

\begin_layout Standard

    print "%s: %s" % (att,att_val.value)
\end_layout

\begin_layout Standard

    att_dict[att] = att_val
\end_layout

\begin_layout Standard

# Changing some  attribute values 
\end_layout

\begin_layout Standard

attributes["AxisBackslash"].value = 0.5
\end_layout

\begin_layout Standard

axis1.write_attribute(attributes["AxisBackslash"])
\end_layout

\begin_layout Standard

attributes["AxisDirection"].value = 1.0
\end_layout

\begin_layout Standard

axis1.write_attribute(attributes["AxisDirection"])
\end_layout

\begin_layout Standard

attributes["AxisVelocity"].value = 1000.0
\end_layout

\begin_layout Standard

axis1.write_attribute(attributes["AxisVelocity"])
\end_layout

\begin_layout Standard

attributes["AxisOvershoot"].value = 500.0
\end_layout

\begin_layout Standard

axis1.write_attribute(attributes["AxisOvershoot"])
\end_layout

\begin_layout Standard

# Testing some device commands
\end_layout

\begin_layout Standard

pos1=axis1.read_attribute("AxisCurrentPosition")
\end_layout

\begin_layout Standard

axis1.command_inout("AxisBackward")
\end_layout

\begin_layout Standard

while pos1.value > 1000.0:
\end_layout

\begin_layout Standard

     pos1=axis1.read_attribute("AxisCurrentPosition")
\end_layout

\begin_layout Standard

     print "position axis 1 = ",pos1.value
\end_layout

\begin_layout Standard

axis1.command_inout("AxisStop")
\end_layout

\begin_layout Standard


\backslash
end{verbatim}
\end_layout

\begin_layout Standard


\backslash
end{example}
\end_layout

\end_inset


\end_layout

\begin_layout Subsection
A quick tour of Tango device server binding through an example
\end_layout

\begin_layout Standard
To write a tango device server in python, you need to import two modules
 in your script which are:
\end_layout

\begin_layout Enumerate
The 
\series bold
PyTango
\series default
 module
\end_layout

\begin_layout Enumerate
The python 
\series bold
sys
\series default
 module provided in the classical python distribution
\end_layout

\begin_layout Standard
The following in the python script for a Tango device server with two commands
 and two attributes.
 The commands are:
\end_layout

\begin_layout Enumerate
IOLOng which receives a Tango Long and return it multiply by 2.
 This command is allowed only if the device is in the ON state.
\end_layout

\begin_layout Enumerate
IOStringArray which receives an array of Tango strings and which returns
 it but in the reverse order.
 This command is only allowed if the device is in the ON state.
\end_layout

\begin_layout Standard
The attributes are:
\end_layout

\begin_layout Enumerate
Long_attr wich is a Tango long attribute, Scalar and Read only with a minimum
 alarm set to 1000 and a maximum alarm set to 1500
\end_layout

\begin_layout Enumerate
Short_attr_rw which is a Tango short attribute, Scalar and Read/Write
\end_layout

\begin_layout Standard
The following code is the complete device server code.
\end_layout

\begin_layout LyX-Code

\end_layout

\begin_layout LyX-Code
#
\end_layout

\begin_layout LyX-Code
import PyTango
\end_layout

\begin_layout LyX-Code
import sys
\end_layout

\begin_layout LyX-Code
#
\end_layout

\begin_layout LyX-Code
#
\end_layout

\begin_layout LyX-Code
class PyDsExp(PyTango.Device_3Impl):
\end_layout

\begin_layout LyX-Code
   def __init__(self,cl,name):
\end_layout

\begin_layout LyX-Code
      PyTango.Device_3Impl.__init__(self,cl,name)
\end_layout

\begin_layout LyX-Code
      print 'In PyDsExp __init__'
\end_layout

\begin_layout LyX-Code
      PyDsExp.init_device(self)
\end_layout

\begin_layout LyX-Code
#
\end_layout

\begin_layout LyX-Code
   def init_device(self):
\end_layout

\begin_layout LyX-Code
      print 'In Python init_device method'
\end_layout

\begin_layout LyX-Code
      self.set_state(PyTango.DevState.ON)
\end_layout

\begin_layout LyX-Code
      self.attr_short_rw = 66
\end_layout

\begin_layout LyX-Code
      self.attr_long = 1246
\end_layout

\begin_layout LyX-Code
#------------------------------------------------------------------ 
\end_layout

\begin_layout LyX-Code
   def delete_device(self):
\end_layout

\begin_layout LyX-Code
      print "[Device delete_device method] for device",self.get_name()
\end_layout

\begin_layout LyX-Code
#------------------------------------------------------------------ 
\end_layout

\begin_layout LyX-Code
   def is_IOLong_allowed(self):
\end_layout

\begin_layout LyX-Code
      if (self.get_state() == PyTango.DevState.ON):
\end_layout

\begin_layout LyX-Code
        return True
\end_layout

\begin_layout LyX-Code
      else:
\end_layout

\begin_layout LyX-Code
        return False
\end_layout

\begin_layout LyX-Code
#
\end_layout

\begin_layout LyX-Code
   def IOLong(self,in_data):
\end_layout

\begin_layout LyX-Code
      print "[IOLong::execute] received number",in_data
\end_layout

\begin_layout LyX-Code
      in_data = in_data * 2;
\end_layout

\begin_layout LyX-Code
      print "[IOLong::execute] return number",in_data
\end_layout

\begin_layout LyX-Code
      return in_data;
\end_layout

\begin_layout LyX-Code
#------------------------------------------------------------------ 
\end_layout

\begin_layout LyX-Code
   def is_IOStringArray_allowed(self):
\end_layout

\begin_layout LyX-Code
      if (self.get_state() == PyTango.DevState.ON):
\end_layout

\begin_layout LyX-Code
         return True
\end_layout

\begin_layout LyX-Code
      else:
\end_layout

\begin_layout LyX-Code
         return False
\end_layout

\begin_layout LyX-Code
#
\end_layout

\begin_layout LyX-Code
   def IOStringArray(self,in_data):
\end_layout

\begin_layout LyX-Code
      l = range(len(in_data)-1,-1,-1);
\end_layout

\begin_layout LyX-Code
      out_index=0
\end_layout

\begin_layout LyX-Code
      out_data=[]
\end_layout

\begin_layout LyX-Code
      for i in l:
\end_layout

\begin_layout LyX-Code
         print "[IOStringArray::execute] received String",in_data[out_index]
\end_layout

\begin_layout LyX-Code
         out_data.append(in_data[i])
\end_layout

\begin_layout LyX-Code
         print "[IOStringArray::execute] return String",out_data[out_index]
\end_layout

\begin_layout LyX-Code
         out_index = out_index+1
\end_layout

\begin_layout LyX-Code
      self.y = out_data
\end_layout

\begin_layout LyX-Code
      return out_data 
\end_layout

\begin_layout LyX-Code
#------------------------------------------------------------------ 
\end_layout

\begin_layout LyX-Code
# ATTRIBUTES
\end_layout

\begin_layout LyX-Code
#------------------------------------------------------------------
\end_layout

\begin_layout LyX-Code
   def read_attr_hardware(self,data):
\end_layout

\begin_layout LyX-Code
      print 'In read_attr_hardware'
\end_layout

\begin_layout LyX-Code
#------------------------------------------------------------------
\end_layout

\begin_layout LyX-Code
   def read_Long_attr(self,the_att):
\end_layout

\begin_layout LyX-Code
      print "[PyDsExp::read_attr] attribute name Long_attr"
\end_layout

\begin_layout LyX-Code
      PyTango.set_attribute_value(the_att,self.attr_long)
\end_layout

\begin_layout LyX-Code
#------------------------------------------------------------------
\end_layout

\begin_layout LyX-Code
   def read_Short_attr_rw(self,the_att):
\end_layout

\begin_layout LyX-Code
      print "[PyDsExp::read_attr] attribute name Short_attr_rw"
\end_layout

\begin_layout LyX-Code
      PyTango.set_attribute_value(the_att,self.attr_short_rw)
\end_layout

\begin_layout LyX-Code
#------------------------------------------------------------------
\end_layout

\begin_layout LyX-Code
   def write_Short_attr_rw(self,the_att):
\end_layout

\begin_layout LyX-Code
      print "In write_Short_attr_rw for attribute ",the_att.get_name()
\end_layout

\begin_layout LyX-Code
      data=[]
\end_layout

\begin_layout LyX-Code
      PyTango.get_write_value(the_att,data)
\end_layout

\begin_layout LyX-Code
      self.attr_short_rw = data[0]
\end_layout

\begin_layout LyX-Code
#
\end_layout

\begin_layout LyX-Code
#
\end_layout

\begin_layout LyX-Code
#
\end_layout

\begin_layout LyX-Code
#
\end_layout

\begin_layout LyX-Code
class PyDsExpClass(PyTango.PyDeviceClass):
\end_layout

\begin_layout LyX-Code
   def __init__(self,name):
\end_layout

\begin_layout LyX-Code
      PyTango.PyDeviceClass.__init__(self,name)
\end_layout

\begin_layout LyX-Code
      self.set_type("TestDevice")
\end_layout

\begin_layout LyX-Code
      print 'In PyDsExpClass __init__'
\newline

\newline

\end_layout

\begin_layout LyX-Code
   cmd_list = {'IOLong':[[PyTango.ArgType.DevLong,"Number"],[PyTango.ArgType.DevLong
,"Number * 2"]],
\end_layout

\begin_layout LyX-Code
'IOStringArray':[[PyTango.ArgType.DevVarStringArray,"Array of string"],[PyTango.Arg
Type.DevVarStringArray,"This reversed array"]] 
\end_layout

\begin_layout LyX-Code
}
\newline

\newline

\end_layout

\begin_layout LyX-Code
   attr_list = {'Long_attr':[[PyTango.ArgType.DevLong,PyTango.AttrDataFormat.SCALAR,
PyTango.AttrWriteType.READ],
\end_layout

\begin_layout LyX-Code
{'min alarm':1000,'max alarm':1500}],
\end_layout

\begin_layout LyX-Code
'Short_attr_rw':[[PyTango.ArgType.DevShort,PyTango.AttrDataFormat.SCALAR,PyTango.Attr
WriteType.READ_WRITE]]
\end_layout

\begin_layout LyX-Code
}
\end_layout

\begin_layout LyX-Code
#
\end_layout

\begin_layout LyX-Code
#
\end_layout

\begin_layout LyX-Code
#
\end_layout

\begin_layout LyX-Code
if __name__ == '__main__':
\end_layout

\begin_layout LyX-Code
   try:
\end_layout

\begin_layout LyX-Code
     py = PyTango.PyUtil(sys.argv)
\end_layout

\begin_layout LyX-Code
     py.add_TgClass(PyDsExpClass,PyDsExp,'PyDsExp')
\newline
     
\newline
     U = PyTango.Util.insta
nce()
\end_layout

\begin_layout LyX-Code
     U.server_init()
\end_layout

\begin_layout LyX-Code
     U.server_run() 
\newline

\newline
   except PyTango.DevFailed,e:
\end_layout

\begin_layout LyX-Code
     print '-------> Received a DevFailed exception:',e
\end_layout

\begin_layout LyX-Code
   except Exception,e:
\end_layout

\begin_layout LyX-Code
     print '-------> An unforeseen exception occured....',e
\end_layout

\begin_layout LyX-Code

\end_layout

\begin_layout Section
The Tango Device Python API
\end_layout

\begin_layout Standard
The PyTango allows access from Python environment to the following Tango
 high level C++ Device classes and structures: 
\end_layout

\begin_layout Itemize
DeviceInfo 
\end_layout

\begin_layout Itemize
DbDevImportInfo 
\end_layout

\begin_layout Itemize
CommandInfo 
\end_layout

\begin_layout Itemize
TimeVal 
\end_layout

\begin_layout Itemize
DeviceDataHistory 
\end_layout

\begin_layout Itemize
AttributeInfo
\end_layout

\begin_layout Itemize
AttributeInfoEx
\end_layout

\begin_layout Itemize
AttributeAlarmInfo
\end_layout

\begin_layout Itemize
AttributeEventInfo
\end_layout

\begin_layout Itemize
ChangeEventInfo
\end_layout

\begin_layout Itemize
PeriodicEventInfo
\end_layout

\begin_layout Itemize
ArchiveEventInfo
\end_layout

\begin_layout Itemize
AttributeValue
\end_layout

\begin_layout Itemize
DeviceAttributeHistory 
\end_layout

\begin_layout Itemize
GroupReply
\end_layout

\begin_layout Itemize
DbDevInfo 
\end_layout

\begin_layout Itemize
DbDevExportInfo 
\end_layout

\begin_layout Itemize
Database 
\end_layout

\begin_layout Standard
Additionally, Tango enumerated types are mapped 
\newline
 to named python constants
 as follows,
\begin_inset ERT
status collapsed

\begin_layout Standard


\backslash
 
\end_layout

\end_inset


\end_layout

\begin_layout Standard

\series bold
DevSource
\series default
 enumeration values are mapped to the following integer constants: 
\end_layout

\begin_layout Itemize
DevSource.DEV 
\end_layout

\begin_layout Itemize
DevSource.CACHE 
\end_layout

\begin_layout Itemize
DevSource.CACHE_DEV 
\end_layout

\begin_layout Standard

\series bold
DispLevel
\series default
 enumeration values are mapped to the following integer constants: 
\end_layout

\begin_layout Itemize
DispLevel.OPERATOR 
\end_layout

\begin_layout Itemize
DevSource.EXPERT 
\end_layout

\begin_layout Standard

\series bold
AttrWriteType
\series default
 enumeration values are mapped to the following integer constants: 
\end_layout

\begin_layout Itemize
AttrWriteType.READ 
\end_layout

\begin_layout Itemize
AttrWriteType.READ_WITH_WRITE 
\end_layout

\begin_layout Itemize
AttrWriteType.WRITE 
\end_layout

\begin_layout Itemize
AttrWriteType.READ_WRITE 
\end_layout

\begin_layout Standard

\series bold
AttrDataFormat
\series default
 enumeration values are mapped to the following integer constants: 
\end_layout

\begin_layout Itemize
AttrDataFormat.SCALAR 
\end_layout

\begin_layout Itemize
AttrDataFormat.SPECTRUM 
\end_layout

\begin_layout Itemize
AttrDataFormat.IMAGE 
\end_layout

\begin_layout Standard

\series bold
AttrQuality
\series default
 enumeration values are mapped to the following integer constants: 
\end_layout

\begin_layout Itemize
AttrQuality.ATTR_VALID 
\end_layout

\begin_layout Itemize
AttrQuality.ATTR_INVALID 
\end_layout

\begin_layout Itemize
AttrQuality.ATTR_ALARM 
\end_layout

\begin_layout Standard

\series bold
EventType
\series default
 enumeration values are mapped to the following integer constants: 
\end_layout

\begin_layout Itemize
EventType.CHANGE_EVENT 
\end_layout

\begin_layout Itemize
EventType.QUALITY_EVENT 
\end_layout

\begin_layout Itemize
EventType.PERIODIC_EVENT 
\end_layout

\begin_layout Itemize
EventType.ARCHIVE_EVENT 
\end_layout

\begin_layout Itemize
EventType.USER_EVENT 
\end_layout

\begin_layout Itemize
EventType.ATTR_CONF_EVENT
\end_layout

\begin_layout Standard

\series bold
ArgType
\series default
 enumeration maps Tango data types to python:
\end_layout

\begin_layout Itemize
CmdArgType.DEV_VOID
\end_layout

\begin_layout Itemize
CmdArgType.DEV_BOOLEAN
\end_layout

\begin_layout Itemize
CmdArgType.DEV_SHORT
\end_layout

\begin_layout Itemize
CmdArgType.DEV_LONG
\end_layout

\begin_layout Itemize
CmdArgType.DEV_FLOAT
\end_layout

\begin_layout Itemize
CmdArgType.DEV_DOUBLE
\end_layout

\begin_layout Itemize
CmdArgType.DEV_USHORT
\end_layout

\begin_layout Itemize
CmdArgType.DEV_ULONG
\end_layout

\begin_layout Itemize
CmdArgType.DEV_STRING
\end_layout

\begin_layout Itemize
CmdArgType.DEV_LONG64
\end_layout

\begin_layout Itemize
CmdArgType.DEV_ULONG64
\end_layout

\begin_layout Itemize
CmdArgType.DEVVAR_CHARARRAY
\end_layout

\begin_layout Itemize
CmdArgType.DEVVAR_SHORTARRAY
\end_layout

\begin_layout Itemize
CmdArgType.DEVVAR_LONGARRAY
\end_layout

\begin_layout Itemize
CmdArgType.DEVVAR_FLOATARRAY
\end_layout

\begin_layout Itemize
CmdArgType.DEVVAR_DOUBLEARRAY
\end_layout

\begin_layout Itemize
CmdArgType.DEVVAR_USHORTARRAY
\end_layout

\begin_layout Itemize
CmdArgType.DEVVAR_ULONGARRAY
\end_layout

\begin_layout Itemize
CmdArgType.DEVVAR_STRINGARRAY
\end_layout

\begin_layout Itemize
CmdArgType.DEVVAR_LONGSTRINGARRAY
\end_layout

\begin_layout Itemize
CmdArgType.DEVVAR_DOUBLESTRINGARRAY
\end_layout

\begin_layout Itemize
CmdArgType.DEV_STATE
\end_layout

\begin_layout Itemize
CmdArgType.DEVVAR_BOOLEANARRAY
\end_layout

\begin_layout Itemize
CmdArgType.DEV_UCHAR
\end_layout

\begin_layout Standard

\series bold
DevSource
\series default
 enumeration values are mapped to the following integer constants: 
\end_layout

\begin_layout Itemize
DevSource.CACHE 
\end_layout

\begin_layout Itemize
DevSource.CACHE_DEV 
\end_layout

\begin_layout Itemize
DevSource.DEV 
\end_layout

\begin_layout Standard

\series bold
DevState
\series default
 enumeration values are mapped to the following integer constants: 
\end_layout

\begin_layout Itemize
DevState.ALARM 
\end_layout

\begin_layout Itemize
DevState.CLOSE 
\end_layout

\begin_layout Itemize
DevState.DISABLE 
\end_layout

\begin_layout Itemize
DevState.EXTRACT 
\end_layout

\begin_layout Itemize
DevState.FAULT 
\end_layout

\begin_layout Itemize
DevState.INIT
\end_layout

\begin_layout Itemize
DevState.INSERT 
\end_layout

\begin_layout Itemize
DevState.MOVING 
\end_layout

\begin_layout Itemize
DevState.OFF 
\end_layout

\begin_layout Itemize
DevState.ON 
\end_layout

\begin_layout Itemize
DevState.OPEN 
\end_layout

\begin_layout Itemize
DevState.RUNNING 
\end_layout

\begin_layout Itemize
DevState.STANDBY 
\end_layout

\begin_layout Itemize
DevState.UNKNOWN 
\end_layout

\begin_layout Standard

\series bold
cb_sub_model
\series default
 enumeration values are mapped to the following integer constants: 
\end_layout

\begin_layout Itemize
cb_sub_model.PULL_CALLBACK 
\end_layout

\begin_layout Itemize
cb_sub_model.PUSH_CALLBACK
\end_layout

\begin_layout Standard

\series bold
AttReqType
\series default
 enumeration values are mapped to the following integer constants:
\end_layout

\begin_layout Itemize
AttReqType.READ_REQ
\end_layout

\begin_layout Itemize
AttReqType.WRITE_REQ
\end_layout

\begin_layout Standard

\series bold
SerialModel
\series default
 enumeration values are mapped to the following integer constants:
\end_layout

\begin_layout Itemize
SerialModel.BY_DEVICE
\end_layout

\begin_layout Itemize
SerialModel.BY_CLASS
\end_layout

\begin_layout Itemize
SerialModel.BY_PROCESS
\end_layout

\begin_layout Itemize
SerialModel.NO_SYNC
\end_layout

\begin_layout Subsection
DeviceInfo
\end_layout

\begin_layout Standard
DeviceInfo is a Python object containing available information for a device
 in the following field members 
\end_layout

\begin_layout Itemize
dev_class: string 
\end_layout

\begin_layout Itemize
server_id: string 
\end_layout

\begin_layout Itemize
server_host: string 
\end_layout

\begin_layout Itemize
server_version: integer 
\end_layout

\begin_layout Itemize
doc_url: string 
\end_layout

\begin_layout Subsection
DbDevImportInfo
\end_layout

\begin_layout Standard
DbDevImportInfo is a Python object containing information that can be imported
 from the configuration database for a device in the following field members
 
\end_layout

\begin_layout Itemize
name: device name 
\end_layout

\begin_layout Itemize
exported: 1 if device is running, 0 otherwise 
\end_layout

\begin_layout Itemize
ior: CORBA reference of the device 
\end_layout

\begin_layout Itemize
version: string 
\end_layout

\begin_layout Subsection
CommandInfo
\end_layout

\begin_layout Standard
A device command info with the following members 
\end_layout

\begin_layout Itemize
cmd_name: command name as ascci string 
\end_layout

\begin_layout Itemize
cmd_tag: command as binary value (for TACO) 
\end_layout

\begin_layout Itemize
in_type: input type as binary value (integer) 
\end_layout

\begin_layout Itemize
out_type: output type as binary value (integer) 
\end_layout

\begin_layout Itemize
in_type_desc: description of input type (optional) 
\end_layout

\begin_layout Itemize
out_type_desc: description of output type (optional) 
\end_layout

\begin_layout Itemize
disp_level: command display level (DispLevel type) 
\end_layout

\begin_layout Subsection
DevError
\end_layout

\begin_layout Standard
Python structure discribing any error resulting from a command execution
 or an attribute query, with following members 
\end_layout

\begin_layout Itemize
reason: string 
\end_layout

\begin_layout Itemize
severity: one of ErrSeverity.WARN, ERRSeverity.ERR or ErrSeverity.PANIC constants
 
\end_layout

\begin_layout Itemize
desc: error description (string) 
\end_layout

\begin_layout Itemize
out_type: output type as binary value (integer) 
\end_layout

\begin_layout Itemize
origin: Tango server method in which the error happened 
\end_layout

\begin_layout Subsection
TimeVal
\end_layout

\begin_layout Standard
Time value structure with three field members 
\end_layout

\begin_layout Itemize
tv_sec: seconds 
\end_layout

\begin_layout Itemize
tv_usec: microseconds 
\end_layout

\begin_layout Itemize
ty_nsec: nanoseconds 
\end_layout

\begin_layout Subsection
DeviceDataHistory
\end_layout

\begin_layout Standard
A python object obtained as a result of query of a command history with
 field members 
\end_layout

\begin_layout Itemize
time: time of command execution (see TimeVal type) 
\end_layout

\begin_layout Itemize
cmd_failed: true if attribute command execution failed 
\end_layout

\begin_layout Itemize
value: returned value as a python object, valid if cmd_failed is false,
 
\end_layout

\begin_layout Itemize
errors: list of errors that occurred (see DevError type) empty if cmd_failed
 is false 
\end_layout

\begin_layout Subsection
AttributeInfo
\end_layout

\begin_layout Standard
A structure containing available information for an attribute with the following
 members 
\end_layout

\begin_layout Itemize
name: attribute name 
\end_layout

\begin_layout Itemize
writable: one of AttrWriteType constant values AttrWriteType.READ,
\newline
 AttrWriteType.R
EAD_WITH_WRITE, 
\newline
 AttrWriteType.WRITE
\newline
 or AttrWriteType.READ_WRITE 
\end_layout

\begin_layout Itemize
data_format: one of AttrDataFormat constant values AttrWriteType.SCALAR,
 
\newline
 AttrWriteType.SPECTRUM, 
\newline
 or AttrWriteType.IMAGE 
\end_layout

\begin_layout Itemize
data_type: integer value indicating attribute type (float, string,..) 
\end_layout

\begin_layout Itemize
max_dim_x: first dimension of attribute (spectrum or image attributes) 
\end_layout

\begin_layout Itemize
max_dim_y: second dimension of attribute(image attribute) 
\end_layout

\begin_layout Itemize
description: string describing the attribute 
\end_layout

\begin_layout Itemize
label: attribute label (Voltage, time, ...) 
\end_layout

\begin_layout Itemize
unit: attribute unit (V, ms, ...) 
\end_layout

\begin_layout Itemize
standard_unit: string 
\end_layout

\begin_layout Itemize
display_unit: string 
\end_layout

\begin_layout Itemize
format: string 
\end_layout

\begin_layout Itemize
min_value: string 
\end_layout

\begin_layout Itemize
max_value: string 
\end_layout

\begin_layout Itemize
min_alarm: string 
\end_layout

\begin_layout Itemize
max_alarm: string 
\end_layout

\begin_layout Itemize
writable_attr_name: string 
\end_layout

\begin_layout Itemize
extensions: list of strings 
\end_layout

\begin_layout Itemize
disp_level: one of DispLevel constants DispLevel.OPERATOR or DispLevel.EXPERT
 
\end_layout

\begin_layout Subsection
AttributeInfoEx
\end_layout

\begin_layout Standard
A structure containing all members from AttributeInfo plus the following
 members 
\end_layout

\begin_layout Itemize
alarms: object containing alarm information (see AttributeAlarmInfo type)
\end_layout

\begin_layout Itemize
events: object containing event information (see AttributeEventInfo type)
\end_layout

\begin_layout Itemize
sys_extensions: list of strings
\end_layout

\begin_layout Subsection
AttributeAlarmInfo
\end_layout

\begin_layout Standard
A structure containing available alarm information for an attribute with
 the following members
\end_layout

\begin_layout Itemize
min_alarm : string
\end_layout

\begin_layout Itemize
max_alarm : string
\end_layout

\begin_layout Itemize
min_warning : string
\end_layout

\begin_layout Itemize
max_warning : string
\end_layout

\begin_layout Itemize
delta_t : string
\end_layout

\begin_layout Itemize
delta_val : string
\end_layout

\begin_layout Itemize
extensions : list of strings
\end_layout

\begin_layout Subsection
AttributeEventInfo
\end_layout

\begin_layout Standard
A structure containing available event information for an attribute with
 the folowing members
\end_layout

\begin_layout Itemize
ch_event : object containing change event information (see ChangeEventInfo)
\end_layout

\begin_layout Itemize
per_event : object containing periodic event information (see PeriodicEventInfo)
\end_layout

\begin_layout Itemize
arch_event : object containing archiving event information (see ArchiveEventInfo
)
\end_layout

\begin_layout Subsection
ChangeEventInfo
\end_layout

\begin_layout Standard
A structure containing available change event information for an attribute
 with the folowing members
\end_layout

\begin_layout Itemize
rel_change : string
\end_layout

\begin_layout Itemize
abs_change : string
\end_layout

\begin_layout Itemize
extensions : list of strings
\end_layout

\begin_layout Subsection
PeriodicEventInfo
\end_layout

\begin_layout Standard
A structure containing available periodic event information for an attribute
 with the folowing members
\end_layout

\begin_layout Itemize
period : string
\end_layout

\begin_layout Itemize
extensions : list of strings
\end_layout

\begin_layout Subsection
ArchiveEventInfo
\end_layout

\begin_layout Standard
A structure containing available archiving event information for an attribute
 with the folowing members
\end_layout

\begin_layout Itemize
archive_rel_change : string
\end_layout

\begin_layout Itemize
archive_abs_change : string
\end_layout

\begin_layout Itemize
extensions : list of strings
\end_layout

\begin_layout Subsection
AttributeValue
\end_layout

\begin_layout Standard
A structure encapsulating the attribute value with additional information
 in the following members 
\end_layout

\begin_layout Itemize
value: python object with effectuve value 
\end_layout

\begin_layout Itemize
scalar_w_value: the last write value for scalar attributes.
 This member contains valid information only if the attribute is scalar
 and writable.
 This member was added in order to allow access to the write value without
 breaking compatility.
 New in PyTango 3.0.4
\end_layout

\begin_layout Itemize
quality: one of AttrQuality constant values AttrQuality.VALID, AttrQuality.INVALID
 or AttrQuality.ALARM 
\end_layout

\begin_layout Itemize
time: time of value read (see TimeVal type) 
\end_layout

\begin_layout Itemize
name: attribute name 
\end_layout

\begin_layout Itemize
dim_x: effective first dimension of attribute (spectrum or image attributes)
 
\end_layout

\begin_layout Itemize
dim_y: effective second dimension of attribute(image attribute) 
\end_layout

\begin_layout Itemize
w_dim_x: the attribute write x dimension.
 New in PyTango 3.0.4
\end_layout

\begin_layout Itemize
w_dim_y: the attribute write y dimension.
 New in PyTango 3.0.4
\end_layout

\begin_layout Subsection
GroupReply
\end_layout

\begin_layout Standard
A python object obtained as a result of invoking an operation on a tango
 Group object.
 The following methods are available
\end_layout

\begin_layout Itemize
get_data: will return the data obtained as a result of calling an operation
 on the Group.
\end_layout

\begin_layout Itemize
has_failed: determines if the operation has succeded.
\end_layout

\begin_layout Itemize
dev_name: gives the device name associated with this reply
\end_layout

\begin_layout Itemize
obj_name: gives the object name associated with this reply
\end_layout

\begin_layout Subsection
DeviceAttributeHistory
\end_layout

\begin_layout Standard
A python object obtained as a result of an attribute read history query
 with field members 
\end_layout

\begin_layout Itemize
attr_failed: true if attribute read operation failed 
\end_layout

\begin_layout Itemize
value: attribute value as an AttributeValue type valid if attr_failed is
 false 
\end_layout

\begin_layout Itemize
errors: list of errors that occurred (see DevError type) empty if attr_failed
 is false 
\end_layout

\begin_layout Itemize
name: attribute name 
\end_layout

\begin_layout Itemize
dim_x: effective first dimension of attribute (spectrum or image attributes)
 
\end_layout

\begin_layout Itemize
dim_y: effective second dimension of attribute(image attribute) 
\end_layout

\begin_layout Subsection
EventData
\end_layout

\begin_layout Standard
A python object containing data generated by an event; it has the following
 members 
\end_layout

\begin_layout Itemize
attr_name: the name of the atribute that generated the event 
\end_layout

\begin_layout Itemize
attr_value: an AttributeValue instance 
\end_layout

\begin_layout Itemize
device: a string containing the name of the device that generated the event
 
\end_layout

\begin_layout Itemize
err: True if an error occurred, False otherwise 
\end_layout

\begin_layout Itemize
errors: a DevErrorList instance 
\end_layout

\begin_layout Itemize
event: a value of the EventType enum 
\end_layout

\begin_layout Subsection
DeviceProxy
\end_layout

\begin_layout Standard
DeviceProxy is the high level Tango object which provides the client with
 an easy to use interface to TANGO devices.
 DeviceProxy provides interfaces to all TANGO Device interfaces.
 The DeviceProxy manages timouts, stateless connections and reconnection
 if the device server is restarted.
 To create a DeviceProxy, a Tango Device name must be set in the object
 constructor.
 
\begin_inset ERT
status collapsed

\begin_layout Standard


\backslash
begin{verbatim}
\end_layout

\begin_layout Standard

dev = DeviceProxy("tango/tangotest/1")
\end_layout

\begin_layout Standard


\backslash
end{verbatim}
\end_layout

\end_inset


\end_layout

\begin_layout Subsubsection
state()
\end_layout

\begin_layout Standard
A method which returns the state of the device.
 
\end_layout

\begin_layout Itemize
Parameters: None 
\end_layout

\begin_layout Itemize
Return : DevState constant 
\end_layout

\begin_layout Itemize
Example: 
\begin_inset ERT
status open

\begin_layout Standard


\backslash
begin{verbatim}
\end_layout

\begin_layout Standard

dev = DeviceProxy("tango/tangotest/1")
\end_layout

\begin_layout Standard

if dev.state() == DevState.ON: ...
\end_layout

\begin_layout Standard


\backslash
end{verbatim}
\end_layout

\end_inset


\end_layout

\begin_layout Subsubsection
status()
\end_layout

\begin_layout Standard
A method which returns the status of the device as a string.
 
\end_layout

\begin_layout Itemize
Parameters: None 
\end_layout

\begin_layout Itemize
Return : string 
\end_layout

\begin_layout Subsubsection
ping()
\end_layout

\begin_layout Standard
A method which sends a ping to the device 
\end_layout

\begin_layout Itemize
Parameters: None 
\end_layout

\begin_layout Itemize
Return : time elapsed in milliseconds 
\end_layout

\begin_layout Subsubsection
set_timeout_millis()
\end_layout

\begin_layout Standard
Set client side timeout for device in milliseconds.
 Any method which takes longer than this time to execute will throw an exception.
 
\end_layout

\begin_layout Itemize
Parameters: 
\end_layout

\begin_deeper
\begin_layout Itemize
timeout: integer value of timeout in milliseconds 
\end_layout

\end_deeper
\begin_layout Itemize
Return : None 
\end_layout

\begin_layout Itemize
Example: 
\begin_inset ERT
status collapsed

\begin_layout Standard


\backslash
begin{verbatim}
\end_layout

\begin_layout Standard

dev.set_timeout_millis(1000)
\end_layout

\begin_layout Standard


\backslash
end{verbatim}
\end_layout

\end_inset


\end_layout

\begin_layout Subsubsection
get_timeout_millis()
\end_layout

\begin_layout Standard
Get the client side timeout in milliseconds.
 
\end_layout

\begin_layout Itemize
Parameters: None 
\end_layout

\begin_layout Subsubsection
get_idl_version()
\end_layout

\begin_layout Standard
Get the version of the Tango Device interface implemented by the device.
\end_layout

\begin_layout Subsubsection
set_source()
\end_layout

\begin_layout Standard
Set the data source(device, polling buffer, polling buffer then device)
 for command_inout and read_attribute methods.
 
\end_layout

\begin_layout Itemize
Parameters: 
\end_layout

\begin_deeper
\begin_layout Itemize
source: DevSource constant 
\end_layout

\end_deeper
\begin_layout Itemize
Return : None 
\end_layout

\begin_layout Itemize
Example: 
\begin_inset ERT
status collapsed

\begin_layout Standard


\backslash
begin{verbatim}
\end_layout

\begin_layout Standard

dev.set_source(DevSource.CACHE_DEV)
\end_layout

\begin_layout Standard


\backslash
end{verbatim}
\end_layout

\end_inset


\end_layout

\begin_layout Subsubsection
get_source()
\end_layout

\begin_layout Standard
Get the data source(device, polling buffer, polling buffer then device)
 used by command_inout or read_attribute methods.
 
\end_layout

\begin_layout Itemize
Parameters: None 
\end_layout

\begin_layout Itemize
Return : DevSource constant 
\end_layout

\begin_layout Itemize
Example: 
\begin_inset ERT
status collapsed

\begin_layout Standard


\backslash
begin{verbatim}
\end_layout

\begin_layout Standard

source = dev.get_source()
\end_layout

\begin_layout Standard

if source == DevSource.CACHE_DEV: ...
\end_layout

\begin_layout Standard


\backslash
end{verbatim}
\end_layout

\end_inset


\end_layout

\begin_layout Subsubsection
black_box()
\end_layout

\begin_layout Standard
Get the last commands executed on the device server.
 
\end_layout

\begin_layout Itemize
Parameters: 
\end_layout

\begin_deeper
\begin_layout Itemize
n: n number of commands to get" 
\end_layout

\end_deeper
\begin_layout Itemize
Return : list of strings containing the date, time, command and from which
 client computer the command was executed.
 
\end_layout

\begin_layout Subsubsection
name()
\end_layout

\begin_layout Standard
Return the device name from the device itself.
\end_layout

\begin_layout Subsubsection
adm_name()
\end_layout

\begin_layout Standard
Return the name of the corresponding administrator device.
 This is useful if you need to send an administration command to the device
 server, e.g restart it.
\end_layout

\begin_layout Standard
New in PyTango 3.0.4
\end_layout

\begin_layout Subsubsection
dev_name()
\end_layout

\begin_layout Standard
Return the device name as it is stored locally.
\end_layout

\begin_layout Subsubsection
alias()
\end_layout

\begin_layout Standard
Return the device alias name or throws an exception if no alias is defined
\end_layout

\begin_layout Subsubsection
info()
\end_layout

\begin_layout Standard
A method which returns information on the device 
\end_layout

\begin_layout Itemize
Parameters: None 
\end_layout

\begin_layout Itemize
Return : DeviceInfo object 
\end_layout

\begin_layout Itemize
Example: 
\begin_inset ERT
status collapsed

\begin_layout Standard


\backslash
begin{verbatim}
\end_layout

\begin_layout Standard

dev_info = dev.info()
\end_layout

\begin_layout Standard

print dev_info.dev_class
\end_layout

\begin_layout Standard

print dev_info.server_id
\end_layout

\begin_layout Standard

print dev_info.server_host
\end_layout

\begin_layout Standard

print dev_info.server_version
\end_layout

\begin_layout Standard

print dev_info.doc_url
\end_layout

\begin_layout Standard

print dev_info.dev_type
\end_layout

\begin_layout Standard


\backslash
end{verbatim}
\end_layout

\end_inset


\end_layout

\begin_layout Standard
All DeviceInfo fields are strings except for the server_version which is
 an integer.
\end_layout

\begin_layout Subsubsection
import_info()
\end_layout

\begin_layout Standard
Query the device for import info from the database.
 
\end_layout

\begin_layout Itemize
Parameters: None 
\end_layout

\begin_layout Itemize
Return : DbDevImportInfo object 
\end_layout

\begin_layout Itemize
Example: 
\begin_inset ERT
status collapsed

\begin_layout Standard


\backslash
begin{verbatim}
\end_layout

\begin_layout Standard

dev_import = dev.import_info()
\end_layout

\begin_layout Standard

print dev_import.name
\end_layout

\begin_layout Standard

print dev_import.exported
\end_layout

\begin_layout Standard

print dev_ior.ior
\end_layout

\begin_layout Standard

print dev_version.version
\end_layout

\begin_layout Standard


\backslash
end{verbatim}
\end_layout

\end_inset


\end_layout

\begin_layout Standard
All DbDevImportInfo fields are strings except for exported which is an integer.
\end_layout

\begin_layout Subsubsection
description()
\end_layout

\begin_layout Standard
Get device description.
 
\end_layout

\begin_layout Itemize
Parameters: None 
\end_layout

\begin_layout Itemize
Return : string describing the device 
\end_layout

\begin_layout Subsubsection
command_query()
\end_layout

\begin_layout Standard
Query the device for information about a single command.
 
\end_layout

\begin_layout Itemize
Parameters: 
\end_layout

\begin_deeper
\begin_layout Itemize
command: command name 
\end_layout

\end_deeper
\begin_layout Itemize
Return : CommandInfo object 
\end_layout

\begin_layout Itemize
Example: 
\begin_inset ERT
status collapsed

\begin_layout Standard


\backslash
begin{verbatim}
\end_layout

\begin_layout Standard

com_info = dev.command_query("DevString")
\end_layout

\begin_layout Standard

print com_info.cmd_name
\end_layout

\begin_layout Standard

print com_info.cmd_tag
\end_layout

\begin_layout Standard

print com_info.in_type
\end_layout

\begin_layout Standard

print com_info.out_type
\end_layout

\begin_layout Standard

print com_info.in_type_desc
\end_layout

\begin_layout Standard

print com_info.out_type_desc
\end_layout

\begin_layout Standard

print com_info.disp_level
\end_layout

\begin_layout Standard


\backslash
end{verbatim}
\end_layout

\end_inset


\end_layout

\begin_layout Subsubsection
command_list_query()
\end_layout

\begin_layout Standard
Query the device for information on all commands.
 
\end_layout

\begin_layout Itemize
Parameters: None 
\end_layout

\begin_layout Itemize
Return : list of CommandInfo objects 
\end_layout

\begin_layout Subsubsection
command_inout()
\end_layout

\begin_layout Standard
Execute a command, on a device, which takes zero or one input argument.
 
\end_layout

\begin_layout Itemize
Parameters: 
\end_layout

\begin_deeper
\begin_layout Itemize
name: command name 
\end_layout

\begin_layout Itemize
argin: if needed, python object containing the input argument 
\end_layout

\end_deeper
\begin_layout Itemize
Return : result of command execution as a python object.
 The following array described which data type you will receive depending
 on the Tango command data type
\newline
 
\begin_inset ERT
status collapsed

\begin_layout Standard


\backslash
begin{center}
\end_layout

\end_inset


\begin_inset Tabular
<lyxtabular version="3" rows="32" columns="2">
<features>
<column alignment="center" valignment="top" leftline="true" width="0">
<column alignment="center" valignment="top" leftline="true" rightline="true" width="0">
<row topline="true" bottomline="true">
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Standard
Tango data type
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Standard
Python type
\end_layout

\end_inset
</cell>
</row>
<row topline="true">
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Standard
DEV_VOID
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Standard
No data
\end_layout

\end_inset
</cell>
</row>
<row topline="true">
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Standard
DEV_BOOLEAN
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Standard
A Python boolean
\end_layout

\end_inset
</cell>
</row>
<row topline="true">
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Standard
DEV_SHORT
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Standard
A Python integer
\end_layout

\end_inset
</cell>
</row>
<row topline="true">
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Standard
DEV_LONG
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Standard
A Python integer
\end_layout

\end_inset
</cell>
</row>
<row topline="true">
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Standard
DEV_LONG64
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Standard
A Python long integer on 32 bits computer
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Standard

\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Standard
or a Python integer on 64 bits computer
\end_layout

\end_inset
</cell>
</row>
<row topline="true">
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Standard
DEV_FLOAT
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Standard
A Python float
\end_layout

\end_inset
</cell>
</row>
<row topline="true">
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Standard
DEV_DOUBLE
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Standard
A Python float
\end_layout

\end_inset
</cell>
</row>
<row topline="true">
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Standard
DEV_USHORT
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Standard
A Python integer
\end_layout

\end_inset
</cell>
</row>
<row topline="true">
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Standard
DEV_ULONG
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Standard
A Python integer
\end_layout

\end_inset
</cell>
</row>
<row topline="true">
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Standard
DEV_ULONG64
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Standard
A Python long integer on 32 bits computer
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Standard

\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Standard
or a Python integet on 64 bits computer
\end_layout

\end_inset
</cell>
</row>
<row topline="true">
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Standard
DEV_STRING
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Standard
A python string
\end_layout

\end_inset
</cell>
</row>
<row topline="true">
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Standard
DEVVAR_CHARARRAY
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Standard
A Python list of Python integer
\end_layout

\end_inset
</cell>
</row>
<row topline="true">
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Standard
DEVVAR_SHORTARRAY
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Standard
A Python list of Python integer
\end_layout

\end_inset
</cell>
</row>
<row topline="true">
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Standard
DEVVAR_LONGARRAY
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Standard
A Python list of Python integer
\end_layout

\end_inset
</cell>
</row>
<row topline="true">
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Standard
DEVVAR_LONG64ARRAY
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Standard
A Python list of Python long integer on 32 bits
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Standard

\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Standard
or a Python list of Python integer on 64 bits
\end_layout

\end_inset
</cell>
</row>
<row topline="true">
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Standard
DEVVAR_FLOATARRAY
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Standard
A Python list of Python float
\end_layout

\end_inset
</cell>
</row>
<row topline="true">
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Standard
DEVVAR_DOUBLEARRAY
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Standard
A Python list of Python float 
\end_layout

\end_inset
</cell>
</row>
<row topline="true">
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Standard
DEVVAR_USHORTARRAY
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Standard
A Python list of Python integer
\end_layout

\end_inset
</cell>
</row>
<row topline="true">
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Standard
DEVVAR_ULONGARRAY
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Standard
A Python list of Python integer
\end_layout

\end_inset
</cell>
</row>
<row topline="true">
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Standard
DEVVAR_ULONG64ARRAY
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Standard
A Python list of Python long integer on 32 bits
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Standard

\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Standard
or a Python list of Python integer on 64 bits
\end_layout

\end_inset
</cell>
</row>
<row topline="true">
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Standard
DEVVAR_STRINGARRAY
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Standard
A Python list of Python string
\end_layout

\end_inset
</cell>
</row>
<row topline="true">
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Standard

\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Standard
A Python tuple with two elements:
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Standard
DEVVAR_LONGSTRINGARRAY
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Standard
1 - A Python list of Python integer
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Standard

\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Standard
2 - A Python list of Python string
\end_layout

\end_inset
</cell>
</row>
<row topline="true">
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Standard

\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Standard
A Python tuple with two elements:
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Standard
DEVVAR_DOUBLESTRINGARRAY
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Standard
1 - A Python list of Python float
\end_layout

\end_inset
</cell>
</row>
<row bottomline="true">
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Standard

\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Standard
2 - A Python list of Python string
\end_layout

\end_inset
</cell>
</row>
</lyxtabular>

\end_inset


\begin_inset ERT
status collapsed

\begin_layout Standard


\backslash
end{center}
\end_layout

\end_inset


\end_layout

\begin_layout Itemize
Example: 
\begin_inset ERT
status collapsed

\begin_layout Standard


\backslash
begin{verbatim}
\end_layout

\begin_layout Standard

str_res = dev.command_inout("DevString","Hello!")
\end_layout

\begin_layout Standard

print str_res
\end_layout

\begin_layout Standard


\backslash
end{verbatim}
\end_layout

\end_inset


\end_layout

\begin_layout Subsubsection
command_inout_asynch()
\end_layout

\begin_layout Standard
Execute a command on a device asynchronously, which takes zero or one input
 argument.
 
\end_layout

\begin_layout Itemize
Parameters: 
\end_layout

\begin_deeper
\begin_layout Itemize
name: command name 
\end_layout

\begin_layout Itemize
argin: if needed, python object containing the input argument 
\end_layout

\begin_layout Itemize
callback or fire_and_forget flag if needed.
 If you choose to use a callback, look at the ApiUtil class methods to learn
 how fire callback execution
\end_layout

\end_deeper
\begin_layout Itemize
Return : Id of the asynchronous request
\end_layout

\begin_layout Itemize
Example : 
\begin_inset ERT
status open

\begin_layout Standard


\backslash
begin{verbatim}
\end_layout

\begin_layout Standard

# without callback nor input argument
\end_layout

\begin_layout Standard

id = dev.command_inout_asynch("DevSlow")
\end_layout

\begin_layout Standard

# Get command result without waiting
\end_layout

\begin_layout Standard

dev.command_inout_reply(id).value
\end_layout

\begin_layout Standard

\end_layout

\begin_layout Standard

#without callback nor input argument using fire and forget semantic
\end_layout

\begin_layout Standard

dev.command_inout_asynch("DevSlow")
\end_layout

\begin_layout Standard

\end_layout

\begin_layout Standard

# with callback and input argument
\end_layout

\begin_layout Standard

class PyCallback:
\end_layout

\begin_layout Standard

    def cmd_ended(self,event):
\end_layout

\begin_layout Standard

        if not event.err:
\end_layout

\begin_layout Standard

             print event.value
\end_layout

\begin_layout Standard

        else:
\end_layout

\begin_layout Standard

             print event.errors
\end_layout

\begin_layout Standard

\end_layout

\begin_layout Standard

cb = PyCallback();
\end_layout

\begin_layout Standard

\end_layout

\begin_layout Standard

dev.command_inout_asynch("DevSlowArg","In_String",cb)
\end_layout

\begin_layout Standard

ApiUtil().get_asynch_replies(400)
\end_layout

\begin_layout Standard


\backslash
end{verbatim}
\end_layout

\end_inset


\end_layout

\begin_layout Subsubsection
command_inout_reply()
\end_layout

\begin_layout Standard
Get the result of an asynchronous command execution (data or exception).
 Throws exception if command result is not yet arrived
\end_layout

\begin_layout Itemize
Parameters: 
\end_layout

\begin_deeper
\begin_layout Itemize
id: Asynchronous request identifier
\end_layout

\begin_layout Itemize
argin: if needed, sleeping time (in mS) while the call will wait for asynchronou
s request result (0 for waiting until the request ended).
\end_layout

\end_deeper
\begin_layout Itemize
Return : result of command execution as a python object
\end_layout

\begin_layout Subsubsection
command_history()
\end_layout

\begin_layout Standard
Retrive command history from the command polling buffer.
\end_layout

\begin_layout Itemize
Parameters: 
\end_layout

\begin_deeper
\begin_layout Itemize
name: command name 
\end_layout

\begin_layout Itemize
depth: integer representing the wanted history depth 
\end_layout

\end_deeper
\begin_layout Itemize
Return : a list of DeviceDataHistory objects.
 
\end_layout

\begin_layout Itemize
Example: 
\begin_inset ERT
status collapsed

\begin_layout Standard


\backslash
begin{verbatim}
\end_layout

\begin_layout Standard

com_hist = dev.command_history("DevString",3)
\end_layout

\begin_layout Standard

for dev_hist in com_hist: print dev_hist
\end_layout

\begin_layout Standard


\backslash
end{verbatim}
\end_layout

\end_inset


\end_layout

\begin_layout Standard
See DeviceDataHistory documentation form more detail.
\end_layout

\begin_layout Subsubsection
attribute_query()
\end_layout

\begin_layout Standard
Query the device for information about a single attribute.
 
\end_layout

\begin_layout Itemize
Parameters: 
\end_layout

\begin_deeper
\begin_layout Itemize
attribute: attribute name 
\end_layout

\end_deeper
\begin_layout Itemize
Return : AttributeInfoEx object 
\end_layout

\begin_layout Itemize
Example: 
\begin_inset ERT
status collapsed

\begin_layout Standard


\backslash
begin{verbatim}
\end_layout

\begin_layout Standard

attr_info = dev.attribute_query("short_scalar")
\end_layout

\begin_layout Standard

print attr_info.name
\end_layout

\begin_layout Standard

print attr_info.writable
\end_layout

\begin_layout Standard

print attr_info.data_format
\end_layout

\begin_layout Standard

print attr_info.data_type
\end_layout

\begin_layout Standard

print attr_info.max_dim_x
\end_layout

\begin_layout Standard

print attr_info.max_dim_y
\end_layout

\begin_layout Standard

print attr_info.description
\end_layout

\begin_layout Standard

print attr_info.label
\end_layout

\begin_layout Standard

print attr_info.unit
\end_layout

\begin_layout Standard

print attr_info.standard_unit
\end_layout

\begin_layout Standard

print attr_info.display_unit
\end_layout

\begin_layout Standard

print attr_info.format
\end_layout

\begin_layout Standard

print attr_info.min_value
\end_layout

\begin_layout Standard

print attr_info.max_value
\end_layout

\begin_layout Standard

print attr_info.min_alarm
\end_layout

\begin_layout Standard

print attr_info.max_alarm
\end_layout

\begin_layout Standard

print attr_info.writable_attr_name
\end_layout

\begin_layout Standard

print attr_info.extensions
\end_layout

\begin_layout Standard

print attr_info.disp_level
\end_layout

\begin_layout Standard

print attr_info.alarms
\end_layout

\begin_layout Standard

print attr_info.events
\end_layout

\begin_layout Standard

print attr_info.sys_extensions
\end_layout

\begin_layout Standard


\backslash
end{verbatim}
\end_layout

\end_inset


\end_layout

\begin_layout Standard
See AttributeInfoEx documentation form more detail.
\end_layout

\begin_layout Subsubsection
attribute_list_query()
\end_layout

\begin_layout Standard
Query the device for information on a list of attributes.
 
\end_layout

\begin_layout Itemize
Parameters: None 
\end_layout

\begin_layout Itemize
Return : list of AttributeInfo objects.
 
\end_layout

\begin_layout Subsubsection
attribute_list_query_ex()
\end_layout

\begin_layout Standard
Query the device for information on a list of attributes.
 
\end_layout

\begin_layout Itemize
Parameters: None 
\end_layout

\begin_layout Itemize
Return : list of AttributeInfoEx objects.
 
\end_layout

\begin_layout Subsubsection
get_attribute_list()
\end_layout

\begin_layout Standard
Return the names of all attributes implemented for this device.
 
\end_layout

\begin_layout Itemize
Parameters: None 
\end_layout

\begin_layout Itemize
Return : list of strings 
\end_layout

\begin_layout Subsubsection
get_attribute_config()
\end_layout

\begin_layout Standard
Same effect as calling attribute_query() or attribute_list_query_ex(), depending
 on the argument passed to the method: a string name or a list of names.
\end_layout

\begin_layout Subsubsection
get_attribute_config_ex()
\end_layout

\begin_layout Standard
Query the device for information on the given attribute names.
 
\end_layout

\begin_layout Itemize
Parameters: list of attribute names 
\end_layout

\begin_layout Itemize
Return : list of AttributeInfoEx objects.
 
\end_layout

\begin_layout Subsubsection
set_attribute_config()
\end_layout

\begin_layout Standard
Change the attribute configuration for the specified attributes.
 
\end_layout

\begin_layout Itemize
Parameters: list of AttributeInfo types 
\end_layout

\begin_layout Itemize
Return : None
\end_layout

\begin_layout Subsubsection
set_attribute_config_ex()
\end_layout

\begin_layout Standard
Change the attribute configuration for the specified attributes.
 
\end_layout

\begin_layout Itemize
Parameters: list of AttributeInfoEx types 
\end_layout

\begin_layout Itemize
Return : None
\end_layout

\begin_layout Subsubsection
read_attribute()
\end_layout

\begin_layout Standard
Read a single attribute.
 
\end_layout

\begin_layout Itemize
Parameters: 
\end_layout

\begin_deeper
\begin_layout Itemize
name: attribute name 
\end_layout

\end_deeper
\begin_layout Itemize
Return : AttributeValue object.
 The following array describes which Python data type is used according
 to the Tango attribute data type
\newline
 
\begin_inset ERT
status collapsed

\begin_layout Standard


\backslash
begin{center}
\end_layout

\end_inset


\begin_inset Tabular
<lyxtabular version="3" rows="23" columns="3">
<features>
<column alignment="center" valignment="top" leftline="true" width="0">
<column alignment="center" valignment="top" leftline="true" width="0">
<column alignment="center" valignment="top" leftline="true" rightline="true" width="0">
<row topline="true" bottomline="true">
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Standard
Attr.
 data format
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Standard
Attr.
 data type
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Standard
Python type
\end_layout

\end_inset
</cell>
</row>
<row topline="true">
<cell alignment="center" valignment="top" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Standard

\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Standard
DEV_BOOLEAN
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Standard
Python boolean
\end_layout

\end_inset
</cell>
</row>
<row topline="true">
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Standard

\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Standard
DEV_UCHAR
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Standard
Python integer
\end_layout

\end_inset
</cell>
</row>
<row topline="true">
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Standard

\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Standard
DEV_SHORT
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Standard
Python integer
\end_layout

\end_inset
</cell>
</row>
<row topline="true">
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Standard

\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Standard
DEV_USHORT
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Standard
Python integer
\end_layout

\end_inset
</cell>
</row>
<row topline="true">
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Standard

\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Standard
DEV_LONG
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Standard
Python integer
\end_layout

\end_inset
</cell>
</row>
<row topline="true">
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Standard
SCALAR
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Standard
DEV_ULONG
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Standard
Python integer
\end_layout

\end_inset
</cell>
</row>
<row topline="true">
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Standard

\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Standard
DEV_LONG64
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Standard
Python integer (64 bits) or long integer (32 bits)
\end_layout

\end_inset
</cell>
</row>
<row topline="true">
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Standard

\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Standard
DEV_ULONG64
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Standard
Python integer (64 bits) or long integer (32 bits)
\end_layout

\end_inset
</cell>
</row>
<row topline="true">
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Standard

\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Standard
DEV_FLOAT
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Standard
Python float
\end_layout

\end_inset
</cell>
</row>
<row topline="true">
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Standard

\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Standard
DEV_DOUBLE
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Standard
Python float
\end_layout

\end_inset
</cell>
</row>
<row topline="true" bottomline="true">
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Standard

\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Standard
DEV_STRING
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Standard
Python string
\end_layout

\end_inset
</cell>
</row>
<row topline="true">
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Standard

\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Standard
DEV_BOOLEAN
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Standard
Python list of Python boolean
\end_layout

\end_inset
</cell>
</row>
<row topline="true">
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Standard

\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Standard
DEV_UCHAR
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Standard
Python list of Python integer
\end_layout

\end_inset
</cell>
</row>
<row topline="true">
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Standard

\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Standard
DEV_SHORT
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Standard
Python list of Python integer
\end_layout

\end_inset
</cell>
</row>
<row topline="true">
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Standard

\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Standard
DEV_USHORT
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Standard
Python list of Python integer
\end_layout

\end_inset
</cell>
</row>
<row topline="true">
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Standard
SPECTRUM
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Standard
DEV_LONG
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Standard
Python list of Python integer
\end_layout

\end_inset
</cell>
</row>
<row topline="true">
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Standard
or
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Standard
DEV_ULONG
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Standard
Python list of Python integer
\end_layout

\end_inset
</cell>
</row>
<row topline="true">
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Standard
IMAGE
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Standard
DEV_LONG64
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Standard
Python list of Python integer (64 bits) or Python long integer (32 bits)
\end_layout

\end_inset
</cell>
</row>
<row topline="true">
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Standard

\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Standard
DEV_ULONG64
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Standard
Python list of Python integer (64 bits) or Python long integer (32 bits)
\end_layout

\end_inset
</cell>
</row>
<row topline="true">
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Standard

\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Standard
DEV_FLOAT
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Standard
Python list of Python float
\end_layout

\end_inset
</cell>
</row>
<row topline="true">
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Standard

\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Standard
DEV_DOUBLE
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Standard
Python list of Python float
\end_layout

\end_inset
</cell>
</row>
<row topline="true" bottomline="true">
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Standard

\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Standard
DEV_STRING
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Standard
Python list of Python string
\end_layout

\end_inset
</cell>
</row>
</lyxtabular>

\end_inset


\begin_inset ERT
status collapsed

\begin_layout Standard


\backslash
end{center}
\end_layout

\end_inset


\end_layout

\begin_layout Itemize

\series bold
NOTE
\series default
: This array described the default data type transfer between the attribute
 Tango data type and Python.
 A Python client is also able to get the attribute data within a Python
 string used simply as a way to transfer binary data.
 This is useful when using classical Python modules like NumPy or Python
 Image Library (PIL).
 In this case, the DeviceProxy class method to read the attribute is called
 
\emph on
read_attribute_as_str
\emph default
() or 
\emph on
read_attributes_as_str()
\emph default
.
\end_layout

\begin_layout Itemize
Example: 
\begin_inset ERT
status collapsed

\begin_layout Standard


\backslash
begin{verbatim}
\end_layout

\begin_layout Standard

attr_val = dev.read_attribute("short_scalar")
\end_layout

\begin_layout Standard

print attr_val.value
\end_layout

\begin_layout Standard

print attr_val.time
\end_layout

\begin_layout Standard

print attr_val.quality
\end_layout

\begin_layout Standard

print attr_val.name
\end_layout

\begin_layout Standard

print attr_val.dim_x
\end_layout

\begin_layout Standard

print attr_val.dim_y
\end_layout

\begin_layout Standard


\backslash
end{verbatim}
\end_layout

\end_inset


\end_layout

\begin_layout Standard
See AttributeValue documentation string form more detail.
\end_layout

\begin_layout Subsubsection
read_attributes()
\end_layout

\begin_layout Standard
Read the list of specified attributes.
 
\end_layout

\begin_layout Itemize
Parameters: 
\end_layout

\begin_deeper
\begin_layout Itemize
name: list of attribute names 
\end_layout

\end_deeper
\begin_layout Itemize
Return : list of AttributeValue types 
\end_layout

\begin_layout Subsubsection
read_attribute_as_str()
\end_layout

\begin_layout Standard
Like the read_attribute() call but returned the value in a Python string
 as a way to transfer binary data
\end_layout

\begin_layout Itemize
Parameters: 
\end_layout

\begin_deeper
\begin_layout Itemize
name: attribute name 
\end_layout

\end_deeper
\begin_layout Itemize
Return : AttributeValue object with its value data member being a Python
 string
\end_layout

\begin_layout Standard
See AttributeValue documentation string form more detail.
\end_layout

\begin_layout Subsubsection
read_attributes_as_str()
\end_layout

\begin_layout Standard
Like the read_attributes call but returning attributes data within Python
 strings
\end_layout

\begin_layout Itemize
Parameters: 
\end_layout

\begin_deeper
\begin_layout Itemize
name: list of attribute names 
\end_layout

\end_deeper
\begin_layout Itemize
Return : list of AttributeValue types 
\end_layout

\begin_layout Subsubsection
write_attribute()
\end_layout

\begin_layout Standard
Write the specified attribute.
 Two kinds of calls are possible.
 The first has one argument which should be a AttributeValue structure.
 The second has several arguments.
\end_layout

\begin_layout Itemize
Parameters: 
\end_layout

\begin_deeper
\begin_layout Enumerate
First option:
\end_layout

\begin_deeper
\begin_layout Itemize
attr_val: AttributeValue type 
\end_layout

\end_deeper
\begin_layout Enumerate
Second option:
\end_layout

\begin_deeper
\begin_layout Itemize
attr_name: attribute name
\end_layout

\begin_layout Itemize
attr_value: the attribute value
\end_layout

\begin_layout Itemize
dim_x: x length (optional, default value = 1)
\end_layout

\begin_layout Itemize
dim_y: y length (optional, default value = 0)
\end_layout

\end_deeper
\end_deeper
\begin_layout Itemize
Return : None 
\end_layout

\begin_layout Itemize
Examples:
\end_layout

\begin_deeper
\begin_layout Enumerate
\begin_inset ERT
status open

\begin_layout Standard


\backslash
begin{verbatim}
\end_layout

\begin_layout Standard

attr_val = dev.read_attribute("short_scalar")
\end_layout

\begin_layout Standard

attr_val.value = 5
\end_layout

\begin_layout Standard

dev.write_attribute(attr_val)
\end_layout

\begin_layout Standard


\backslash
end{verbatim}
\end_layout

\end_inset


\end_layout

\begin_layout Enumerate
\begin_inset ERT
status open

\begin_layout Standard


\backslash
begin{verbatim}
\end_layout

\begin_layout Standard

dev.write_attribute("short_scalar",5)
\end_layout

\begin_layout Standard


\backslash
end{verbatim}
\end_layout

\end_inset


\end_layout

\end_deeper
\begin_layout Subsubsection
write_attributes()
\end_layout

\begin_layout Standard
Write the specified list of attributes.
 
\end_layout

\begin_layout Itemize
Parameters: 
\end_layout

\begin_deeper
\begin_layout Itemize
attr_list: list of AttributeValue objects 
\end_layout

\end_deeper
\begin_layout Itemize
Return : None 
\end_layout

\begin_layout Subsubsection
attribute_history()
\end_layout

\begin_layout Standard
Retrive attribute history from the command polling buffer.
 
\end_layout

\begin_layout Itemize
Parameters: 
\end_layout

\begin_deeper
\begin_layout Itemize
name: attribute name 
\end_layout

\begin_layout Itemize
depth: integer representing the wanted history depth 
\end_layout

\end_deeper
\begin_layout Itemize
Return : a list of DeviceAttributeHistory types 
\end_layout

\begin_layout Itemize
Example: 
\begin_inset ERT
status collapsed

\begin_layout Standard


\backslash
begin{verbatim}
\end_layout

\begin_layout Standard

for dev_hist in dev.attribute_history("short_scalar",3): 
\end_layout

\begin_layout Standard

print dev_hist
\end_layout

\begin_layout Standard


\backslash
end{verbatim}
\end_layout

\end_inset


\end_layout

\begin_layout Standard
See DeviceAttributeHistory documentation string form more detail.
\end_layout

\begin_layout Subsubsection
is_command_polled()
\end_layout

\begin_layout Standard
True if the command is polled.
 
\end_layout

\begin_layout Itemize
Parameters: 
\end_layout

\begin_deeper
\begin_layout Itemize
cmd_name: command name 
\end_layout

\end_deeper
\begin_layout Itemize
Return : boolean value 
\end_layout

\begin_layout Subsubsection
is_attribute_polled()
\end_layout

\begin_layout Standard
True if the attribute is polled.
 
\end_layout

\begin_layout Itemize
Parameters: 
\end_layout

\begin_deeper
\begin_layout Itemize
attr_name: command name 
\end_layout

\end_deeper
\begin_layout Itemize
Return : boolean value 
\end_layout

\begin_layout Subsubsection
get_command_poll_period()
\end_layout

\begin_layout Standard
Return the command polling period.
 
\end_layout

\begin_layout Itemize
Parameters: 
\end_layout

\begin_deeper
\begin_layout Itemize
cmd_name: command name 
\end_layout

\end_deeper
\begin_layout Itemize
Return : polling period in milliseconds 
\end_layout

\begin_layout Subsubsection
get_attribute_poll_period()
\end_layout

\begin_layout Standard
Return the attribute polling period.
 
\end_layout

\begin_layout Itemize
Parameters: 
\end_layout

\begin_deeper
\begin_layout Itemize
attr_name: attribute name 
\end_layout

\end_deeper
\begin_layout Itemize
Return : polling period in milliseconds 
\end_layout

\begin_layout Subsubsection
polling_status()
\end_layout

\begin_layout Itemize
Return the device polling status.
 
\end_layout

\begin_layout Itemize
Parameters:None 
\end_layout

\begin_layout Itemize
Return : list of strings, with one string for each polled command/attribute.
 Each string is a multi-line string with 
\end_layout

\begin_deeper
\begin_layout Itemize
attribute/command name 
\end_layout

\begin_layout Itemize
attribute/command polling period in milliseconds 
\end_layout

\begin_layout Itemize
attribute/command polling ring buffer 
\end_layout

\begin_layout Itemize
time needed for last attribute/command execution in milliseconds 
\end_layout

\begin_layout Itemize
time since data in the ring buffer has not been updated 
\end_layout

\begin_layout Itemize
delta time between the last records in the ring buffer 
\end_layout

\begin_layout Itemize
exception parameters in case of the last execution failed 
\end_layout

\end_deeper
\begin_layout Subsubsection
poll_command()
\end_layout

\begin_layout Standard
Add a command to the list of polled commands.
 
\end_layout

\begin_layout Itemize
Parameters: 
\end_layout

\begin_deeper
\begin_layout Itemize
cmd_name: command name 
\end_layout

\begin_layout Itemize
period: polling period in milliseconds 
\end_layout

\end_deeper
\begin_layout Itemize
Return : None 
\end_layout

\begin_layout Subsubsection
poll_attribute()
\end_layout

\begin_layout Standard
Add an attribute to the list of polled attributes.
 
\end_layout

\begin_layout Itemize
Parameters: 
\end_layout

\begin_deeper
\begin_layout Itemize
attr_name: attribute name 
\end_layout

\begin_layout Itemize
period: polling period in milliseconds 
\end_layout

\end_deeper
\begin_layout Itemize
Return : None 
\end_layout

\begin_layout Subsubsection
stop_poll_command()
\end_layout

\begin_layout Standard
Remove a command from the list of polled commands.
 
\end_layout

\begin_layout Itemize
Parameters: 
\end_layout

\begin_deeper
\begin_layout Itemize
cmd_name: command name 
\end_layout

\end_deeper
\begin_layout Itemize
Return : None 
\end_layout

\begin_layout Subsubsection
stop_poll_attribute()
\end_layout

\begin_layout Standard
Remove an attribute from the list of polled attributes.
 
\end_layout

\begin_layout Itemize
Parameters: 
\end_layout

\begin_deeper
\begin_layout Itemize
attr_name: attribute name 
\end_layout

\end_deeper
\begin_layout Itemize
Return : None 
\end_layout

\begin_layout Subsubsection
get_property()
\end_layout

\begin_layout Standard
Get a list of properties for a device.
 
\end_layout

\begin_layout Itemize
Parameters: 
\end_layout

\begin_deeper
\begin_layout Itemize
prop_list: list of property names 
\end_layout

\end_deeper
\begin_layout Itemize
Return : a dictionary which keys are the property names the value associated
 with each key being a list of strings representing the property value 
\end_layout

\begin_layout Subsubsection
put_property()
\end_layout

\begin_layout Standard
Put a list of properties for a device.
 
\end_layout

\begin_layout Itemize
Parameters: 
\end_layout

\begin_deeper
\begin_layout Itemize
props: a dictionary which keys are the property names the value associated
 with each key being a list of strings representing the property value 
\end_layout

\end_deeper
\begin_layout Itemize
Return : None 
\end_layout

\begin_layout Subsubsection
delete_property()
\end_layout

\begin_layout Standard
Delete a list of properties for a device.
 
\end_layout

\begin_layout Itemize
Parameters: 
\end_layout

\begin_deeper
\begin_layout Itemize
prop_list: list of property names 
\end_layout

\end_deeper
\begin_layout Itemize
Return : None 
\end_layout

\begin_layout Subsubsection
subscribe_event()
\end_layout

\begin_layout Standard
Subscribes to an event generated by the device.
\end_layout

\begin_layout Standard
When the stateless flag is set to False, an exception will be thrown when
 the event subscription encounters a problem.
 With the stateless flag set to True, the event subscription will always
 succeed, even if the corresponding device server is not running.
 The keep alive thread will try every 10 seconds to subscribe for the specified
 event.
 At every subscription retry, a callback is executed which contains the
 corresponding exception.
\end_layout

\begin_layout Itemize
Parameters: 
\end_layout

\begin_deeper
\begin_layout Itemize
attr_name: a string containing the attribute name to subscribe to 
\end_layout

\begin_layout Itemize
event: a value of EventType enum 
\end_layout

\begin_layout Itemize
call: the callback object that implements the push_event 
\end_layout

\begin_layout Itemize
filters: a list of strings containing the filters 
\end_layout

\begin_layout Itemize
stateless: stateless flag (optional.
 Default = False) (New in PyTango 3.0.4)
\end_layout

\end_deeper
\begin_layout Itemize
Return : the id of the event 
\end_layout

\begin_layout Itemize
Example : 
\begin_inset ERT
status open

\begin_layout Standard


\backslash
begin{verbatim}
\end_layout

\begin_layout Standard

class PyCallback:
\end_layout

\begin_layout Standard

   def push_event(self,event):
\end_layout

\begin_layout Standard

      if not event.err:
\end_layout

\begin_layout Standard

         print event.attr_name, event.attr_value.value
\end_layout

\begin_layout Standard

      else:
\end_layout

\begin_layout Standard

         print event.errors
\end_layout

\begin_layout Standard

\end_layout

\begin_layout Standard

cb = PyCallback();
\end_layout

\begin_layout Standard

ev = dev.subscribe_event('long_scalar', EventType.CHANGE, cb, [], True)
\end_layout

\begin_layout Standard


\backslash
end{verbatim}
\end_layout

\end_inset


\end_layout

\begin_layout Subsubsection
unsubscribe_event()
\end_layout

\begin_layout Standard
Unsubscribes from a given event 
\end_layout

\begin_layout Itemize
Parameters: the id of the event 
\end_layout

\begin_layout Itemize
Return : None 
\end_layout

\begin_layout Subsection
AttributeProxy
\end_layout

\begin_layout Standard
AttributeProxy is the high level Tango object which provides the client
 with an easy to use interface to TANGO attributes.
 The AttributeProxy manages timeouts, stateless connections and reconnection
 if the device server is restarted.
 To create AttributeProxy instance, two constructors are provided which
 take as arguments:
\end_layout

\begin_layout Itemize
A fully qualified Tango attribute name (device_name/attribute_name)
\end_layout

\begin_layout Itemize
An already constructed DeviceProxy instance and the attribute name.
 This constructor will do a deep copy of the DeviceProxy instance.
\end_layout

\begin_layout Standard
See test_att_proxy.py for more examples of AttributeProxy class usage.
 
\begin_inset ERT
status open

\begin_layout Standard


\backslash
begin{verbatim}
\end_layout

\begin_layout Standard

att = AttributeProxy("tango/tangotest/1/short_scalar")
\end_layout

\begin_layout Standard

dev = DeviceProxy("tango/tangotest/1")
\end_layout

\begin_layout Standard

another_att = AttributeProxy(dev,"short_scalar")
\end_layout

\begin_layout Standard

\end_layout

\begin_layout Standard


\backslash
end{verbatim}
\end_layout

\end_inset


\end_layout

\begin_layout Subsubsection
state()
\end_layout

\begin_layout Standard
A method which returns the state of the device.
 
\end_layout

\begin_layout Itemize
Parameters: None 
\end_layout

\begin_layout Itemize
Return : DevState constant 
\end_layout

\begin_layout Itemize
Example: 
\begin_inset ERT
status collapsed

\begin_layout Standard


\backslash
begin{verbatim}
\end_layout

\begin_layout Standard

att = AttributeProxy("tango/tangotest/1/long_scalar")
\end_layout

\begin_layout Standard

if att.state() == DevState.ON: ...
\end_layout

\begin_layout Standard


\backslash
end{verbatim}
\end_layout

\end_inset


\end_layout

\begin_layout Subsubsection
status()
\end_layout

\begin_layout Standard
A method which returns the status of the device as a string.
 
\end_layout

\begin_layout Itemize
Parameters: None 
\end_layout

\begin_layout Itemize
Return : string 
\end_layout

\begin_layout Subsubsection
ping()
\end_layout

\begin_layout Standard
A method which sends a ping to the device 
\end_layout

\begin_layout Itemize
Parameters: None 
\end_layout

\begin_layout Itemize
Return : time elapsed in milliseconds 
\end_layout

\begin_layout Subsubsection
name()
\end_layout

\begin_layout Standard
Return the attribute name.
\end_layout

\begin_layout Subsubsection
get_device_proxy()
\end_layout

\begin_layout Standard
A method which returns a proxy to the device associated with the attribute.
 
\end_layout

\begin_layout Itemize
Parameters: None 
\end_layout

\begin_layout Itemize
Return : DeviceProxy object 
\end_layout

\begin_layout Subsubsection
set_transparency_reconnection()
\end_layout

\begin_layout Standard
A method to enable transparency reconnection in case the underlying device
 has been restarted
\end_layout

\begin_layout Itemize
Parameters: A boolean set to True if you want transparency reconnection
\end_layout

\begin_layout Itemize
Return: Nothing
\end_layout

\begin_layout Subsubsection
get_transparency_reconnection()
\end_layout

\begin_layout Standard
A method to get the transparency reconnection flag value
\end_layout

\begin_layout Itemize
Parameters: None
\end_layout

\begin_layout Itemize
Return: Boolean
\end_layout

\begin_layout Subsubsection
get_config()
\end_layout

\begin_layout Standard
Query the attribute configuration.
 
\end_layout

\begin_layout Itemize
Parameters: None 
\end_layout

\begin_layout Itemize
Return : AttributeInfoEx object 
\end_layout

\begin_layout Itemize
Example: 
\begin_inset ERT
status open

\begin_layout Standard


\backslash
begin{verbatim}
\end_layout

\begin_layout Standard

attr_info = att.get_config()
\end_layout

\begin_layout Standard

print attr_info.name
\end_layout

\begin_layout Standard

print attr_info.writable
\end_layout

\begin_layout Standard

print attr_info.data_format
\end_layout

\begin_layout Standard

print attr_info.data_type
\end_layout

\begin_layout Standard

print attr_info.max_dim_x
\end_layout

\begin_layout Standard

print attr_info.max_dim_y
\end_layout

\begin_layout Standard

print attr_info.description
\end_layout

\begin_layout Standard

print attr_info.label
\end_layout

\begin_layout Standard

print attr_info.unit
\end_layout

\begin_layout Standard

print attr_info.standard_unit
\end_layout

\begin_layout Standard

print attr_info.display_unit
\end_layout

\begin_layout Standard

print attr_info.format
\end_layout

\begin_layout Standard

print attr_info.min_value
\end_layout

\begin_layout Standard

print attr_info.max_value
\end_layout

\begin_layout Standard

print attr_info.min_alarm
\end_layout

\begin_layout Standard

print attr_info.max_alarm
\end_layout

\begin_layout Standard

print attr_info.writable_attr_name
\end_layout

\begin_layout Standard

print attr_info.extensions
\end_layout

\begin_layout Standard

print attr_info.disp_level
\end_layout

\begin_layout Standard

print attr_info.alarms
\end_layout

\begin_layout Standard

print attr_info.events
\end_layout

\begin_layout Standard

print attr_info.sys_extensions
\end_layout

\begin_layout Standard


\backslash
end{verbatim}
\end_layout

\end_inset


\end_layout

\begin_layout Standard
See AttributeInfoEx documentation form more detail.
\end_layout

\begin_layout Subsubsection
set_config()
\end_layout

\begin_layout Standard
Change the attribute configuration for the specified attributes.
\end_layout

\begin_layout Itemize
Parameters: AttributeInfo or AttributeInfoEx
\end_layout

\begin_layout Itemize
Return : None 
\end_layout

\begin_layout Subsubsection
read()
\end_layout

\begin_layout Standard
Reads the attribute.
 
\end_layout

\begin_layout Itemize
Parameters: None 
\end_layout

\begin_layout Itemize
Return : AttributeValue object 
\end_layout

\begin_layout Itemize
Example: 
\begin_inset ERT
status collapsed

\begin_layout Standard


\backslash
begin{verbatim}
\end_layout

\begin_layout Standard

attr_val = dev.read_attribute()
\end_layout

\begin_layout Standard

print attr_val.value
\end_layout

\begin_layout Standard

print attr_val.time
\end_layout

\begin_layout Standard

print attr_val.quality
\end_layout

\begin_layout Standard

print attr_val.name
\end_layout

\begin_layout Standard

print attr_val.dim_x
\end_layout

\begin_layout Standard

print attr_val.dim_y
\end_layout

\begin_layout Standard


\backslash
end{verbatim}
\end_layout

\end_inset


\end_layout

\begin_layout Standard
See AttributeValue documentation string form more detail.
\end_layout

\begin_layout Subsubsection
read_as_str()
\end_layout

\begin_layout Standard
Reads the attribute and get its value in a Python string.
 
\end_layout

\begin_layout Itemize
Parameters: None 
\end_layout

\begin_layout Itemize
Return : AttributeValue object 
\end_layout

\begin_layout Itemize
Example: 
\begin_inset ERT
status collapsed

\begin_layout Standard


\backslash
begin{verbatim}
\end_layout

\begin_layout Standard

attr_val = dev.read_attribute()
\end_layout

\begin_layout Standard

print attr_val.value
\end_layout

\begin_layout Standard

print attr_val.time
\end_layout

\begin_layout Standard

print attr_val.quality
\end_layout

\begin_layout Standard

print attr_val.name
\end_layout

\begin_layout Standard

print attr_val.dim_x
\end_layout

\begin_layout Standard

print attr_val.dim_y
\end_layout

\begin_layout Standard


\backslash
end{verbatim}
\end_layout

\end_inset


\end_layout

\begin_layout Standard
See AttributeValue documentation string form more detail.
\end_layout

\begin_layout Subsubsection
read_asynch()
\end_layout

\begin_layout Standard
Performs an asynchronous read 
\end_layout

\begin_layout Itemize
Parameters: None or Callback 
\end_layout

\begin_layout Itemize
Return : id of the read or None 
\end_layout

\begin_layout Itemize
Example : 
\begin_inset ERT
status collapsed

\begin_layout Standard


\backslash
begin{verbatim}
\end_layout

\begin_layout Standard

# without callback
\end_layout

\begin_layout Standard

id = att.read_asynch()
\end_layout

\begin_layout Standard

att.read_reply(id).value
\end_layout

\begin_layout Standard

\end_layout

\begin_layout Standard

# with callback
\end_layout

\begin_layout Standard

class PyCallback:
\end_layout

\begin_layout Standard

    def attr_read(self,event):
\end_layout

\begin_layout Standard

        if not event.err:
\end_layout

\begin_layout Standard

    for el in event.argout:
\end_layout

\begin_layout Standard

        print el.value
\end_layout

\begin_layout Standard

else:
\end_layout

\begin_layout Standard

    print event.errors
\end_layout

\begin_layout Standard

\end_layout

\begin_layout Standard

cb = PyCallback();
\end_layout

\begin_layout Standard

ApiUtil().set_asynch_cb_sub_model(cb_sub_model.PUSH_CALLBACK)
\end_layout

\begin_layout Standard

att.read_asynch(cb)
\end_layout

\begin_layout Standard


\backslash
end{verbatim}
\end_layout

\end_inset


\end_layout

\begin_layout Subsubsection
read_reply()
\end_layout

\begin_layout Standard
Checks if the read has been performed 
\end_layout

\begin_layout Itemize
Parameters: 
\end_layout

\begin_deeper
\begin_layout Itemize
id: id of the read 
\end_layout

\begin_layout Itemize
to : timeout in millis (optional) 
\end_layout

\end_deeper
\begin_layout Itemize
Return : AttributeValue instance 
\end_layout

\begin_layout Subsubsection
write()
\end_layout

\begin_layout Standard
Write the attribute.
 
\end_layout

\begin_layout Itemize
Parameters: 
\end_layout

\begin_deeper
\begin_layout Itemize
attr_val: AttributeValue type 
\end_layout

\end_deeper
\begin_layout Itemize
Return : None 
\end_layout

\begin_layout Itemize
Example: 
\begin_inset ERT
status collapsed

\begin_layout Standard


\backslash
begin{verbatim}
\end_layout

\begin_layout Standard

attr_val = dev.read_attribute("short_scalar")
\end_layout

\begin_layout Standard

attr_val.value = 5
\end_layout

\begin_layout Standard

dev.write_attribute(attr_val)
\end_layout

\begin_layout Standard


\backslash
end{verbatim}
\end_layout

\end_inset


\end_layout

\begin_layout Standard
Write the value into this attribute.
 Two kinds of calls are possible.
 The first has one argument which should be a AttributeValue structure.
 The second has several arguments.
\end_layout

\begin_layout Itemize
Parameters: 
\end_layout

\begin_deeper
\begin_layout Enumerate
First option:
\end_layout

\begin_deeper
\begin_layout Itemize
attr_val: AttributeValue type 
\end_layout

\end_deeper
\begin_layout Enumerate
Second option:
\end_layout

\begin_deeper
\begin_layout Itemize
attr_name: attribute name
\end_layout

\begin_layout Itemize
attr_value: the attribute value
\end_layout

\begin_layout Itemize
dim_x: x length (optional, default value = 1)
\end_layout

\begin_layout Itemize
dim_y: y length (optional, default value = 0)
\end_layout

\end_deeper
\end_deeper
\begin_layout Itemize
Return : None 
\end_layout

\begin_layout Itemize
Examples:
\end_layout

\begin_deeper
\begin_layout Enumerate
\begin_inset ERT
status open

\begin_layout Standard


\backslash
begin{verbatim}
\end_layout

\begin_layout Standard

attr_val = dev.read_attribute("short_scalar")
\end_layout

\begin_layout Standard

attr_val.value = 5
\end_layout

\begin_layout Standard

dev.write_attribute(attr_val)
\end_layout

\begin_layout Standard


\backslash
end{verbatim}
\end_layout

\end_inset


\end_layout

\begin_layout Enumerate
\begin_inset ERT
status open

\begin_layout Standard


\backslash
begin{verbatim}
\end_layout

\begin_layout Standard

dev.write_attribute("short_scalar",5)
\end_layout

\begin_layout Standard


\backslash
end{verbatim}
\end_layout

\end_inset


\end_layout

\end_deeper
\begin_layout Subsubsection
write_asynch()
\end_layout

\begin_layout Standard
Todo
\end_layout

\begin_layout Subsubsection
write_reply()
\end_layout

\begin_layout Standard
Todo
\end_layout

\begin_layout Subsubsection
history()
\end_layout

\begin_layout Standard
Retrieve attribute history from the command polling buffer.
 
\end_layout

\begin_layout Itemize
Parameters: 
\end_layout

\begin_deeper
\begin_layout Itemize
depth: integer representing the wanted history depth 
\end_layout

\end_deeper
\begin_layout Itemize
Return : a list of DeviceAttributeHistory types 
\end_layout

\begin_layout Itemize
Example: 
\begin_inset ERT
status collapsed

\begin_layout Standard


\backslash
begin{verbatim}
\end_layout

\begin_layout Standard

for dev_hist in dev.attribute_history("short_scalar",3): 
\end_layout

\begin_layout Standard

print dev_hist
\end_layout

\begin_layout Standard


\backslash
end{verbatim}
\end_layout

\end_inset


\end_layout

\begin_layout Standard
See DeviceAttributeHistory documentation string form more detail.
\end_layout

\begin_layout Subsubsection
is_polled()
\end_layout

\begin_layout Standard
True if the attribute is polled.
 
\end_layout

\begin_layout Itemize
Parameters: None 
\end_layout

\begin_layout Itemize
Return : boolean value 
\end_layout

\begin_layout Subsubsection
get_poll_period()
\end_layout

\begin_layout Standard
Returns the attribute polling period.
 
\end_layout

\begin_layout Itemize
Parameters: None 
\end_layout

\begin_layout Itemize
Return : polling period in milliseconds 
\end_layout

\begin_layout Subsubsection
poll()
\end_layout

\begin_layout Standard
Adds the attribute to the list of polled attributes.
 
\end_layout

\begin_layout Itemize
Parameters: 
\end_layout

\begin_deeper
\begin_layout Itemize
period: polling period in milliseconds 
\end_layout

\end_deeper
\begin_layout Itemize
Return : None 
\end_layout

\begin_layout Subsubsection
stop_poll()
\end_layout

\begin_layout Standard
Removes the attribute from the list of polled attributes.
 
\end_layout

\begin_layout Itemize
Parameters: None 
\end_layout

\begin_layout Itemize
Return : None 
\end_layout

\begin_layout Subsubsection
get_property()
\end_layout

\begin_layout Standard
Get a list of properties for the attribute.
 
\end_layout

\begin_layout Itemize
Parameters: 
\end_layout

\begin_deeper
\begin_layout Itemize
prop_list: list of property names 
\end_layout

\end_deeper
\begin_layout Itemize
Return : a dictionary which keys are the property names the value associated
 with each key being a list of strings representing the property value 
\end_layout

\begin_layout Subsubsection
put_property()
\end_layout

\begin_layout Standard
Put a list of properties for the attribute.
 
\end_layout

\begin_layout Itemize
Parameters: 
\end_layout

\begin_deeper
\begin_layout Itemize
props: a dictionary which keys are the property names the value associated
 with each key being a list of strings representing the property value 
\end_layout

\end_deeper
\begin_layout Itemize
Return : None 
\end_layout

\begin_layout Subsubsection
delete_property()
\end_layout

\begin_layout Standard
Delete a list of properties for the attribute.
 
\end_layout

\begin_layout Itemize
Parameters: 
\end_layout

\begin_deeper
\begin_layout Itemize
prop_list: list of property names 
\end_layout

\end_deeper
\begin_layout Itemize
Return : None 
\end_layout

\begin_layout Subsubsection
subscribe_event()
\end_layout

\begin_layout Standard
Subscribes to an event generated by the device associated with the attribute.
\end_layout

\begin_layout Standard
When the stateless flag is set to False, an exception will be thrown when
 the event subscription encounters a problem.
 With the stateless flag set to True, the event subscription will always
 succeed, even if the corresponding device server is not running.
 The keep alive thread will try every 10 seconds to subscribe for the specified
 event.
 At every subscription retry, a callback is executed which contains the
 corresponding exception.
\end_layout

\begin_layout Itemize
Parameters: 
\end_layout

\begin_deeper
\begin_layout Itemize
event: a value of EventType enum 
\end_layout

\begin_layout Itemize
call: the callback object that implements the push_event 
\end_layout

\begin_layout Itemize
filters: a list of strings containing the filters
\end_layout

\begin_layout Itemize
stateless: stateless flag (optional.
 Default = False) (New in PyTango 3.0.4)
\end_layout

\end_deeper
\begin_layout Itemize
Return : the id of the event 
\end_layout

\begin_layout Itemize
Example : 
\begin_inset ERT
status open

\begin_layout Standard


\backslash
begin{verbatim}
\end_layout

\begin_layout Standard

class PyCallback:
\end_layout

\begin_layout Standard

   def push_event(self,event):
\end_layout

\begin_layout Standard

      if not event.err:
\end_layout

\begin_layout Standard

         print event.attr_name, event.attr_value.value
\end_layout

\begin_layout Standard

      else:
\end_layout

\begin_layout Standard

         print event.errors
\end_layout

\begin_layout Standard

\end_layout

\begin_layout Standard

cb = PyCallback();
\end_layout

\begin_layout Standard

ev = att.subscribe_event(EventType.CHANGE, cb, [], True)
\end_layout

\begin_layout Standard


\backslash
end{verbatim}
\end_layout

\end_inset


\end_layout

\begin_layout Subsubsection
unsubscribe_event()
\end_layout

\begin_layout Standard
Unsubscribes from a given event 
\end_layout

\begin_layout Itemize
Parameters: the id of the event 
\end_layout

\begin_layout Itemize
Return : None 
\end_layout

\begin_layout Subsection
ApiUtil
\end_layout

\begin_layout Standard
In the current version of the bindings this object wraps some methods of
 the ApiUtil C++ singleton; if other methods are needed they will be included
 in the future.
\end_layout

\begin_layout Subsubsection
get_asynch_replies()
\end_layout

\begin_layout Standard
Awakes waiting callbacks in the PULL_CALLBACK model 
\end_layout

\begin_layout Itemize
Parameters: None 
\end_layout

\begin_layout Subsubsection
set_asynch_cb_sub_model()
\end_layout

\begin_layout Standard
Sets asynchronous callbcack model 
\end_layout

\begin_layout Itemize
Parameters: callback model 
\end_layout

\begin_layout Itemize
Return : None 
\end_layout

\begin_layout Itemize
Example : see read_asynch 
\end_layout

\begin_layout Subsection
Group
\end_layout

\begin_layout Subsubsection
ping()
\end_layout

\begin_layout Standard
Ping all devices in the group.
\end_layout

\begin_layout Itemize
Parameters: 
\end_layout

\begin_deeper
\begin_layout Itemize
fwd: (optional) if set to True (the default), the request is also forwarded
 to subgroups.
 Otherwise, it is only applied to the local set of devices.
 
\end_layout

\end_deeper
\begin_layout Itemize
Return : True if all devices in the group are alive, False otherwise.
 
\end_layout

\begin_layout Subsubsection
add()
\end_layout

\begin_layout Standard
Attaches a sub-group or a group of devices which obey the given pattern
 or a given list of patterns
\end_layout

\begin_layout Itemize
Parameters:
\end_layout

\begin_deeper
\begin_layout Itemize
group: a python group object to add as a sub-group 
\shape italic
or
\end_layout

\begin_layout Itemize
dev_pattern: a string 
\shape italic
or
\end_layout

\begin_layout Itemize
dev_pattern_list: a list of strings
\end_layout

\end_deeper
\begin_layout Itemize
Return: None
\end_layout

\begin_layout Itemize
Example : 
\begin_inset ERT
status open

\begin_layout Standard


\backslash
begin{verbatim}
\end_layout

\begin_layout Standard

homer = PyTango.Group("homer")
\end_layout

\begin_layout Standard

homer.add("homer/simpson/*")
\end_layout

\begin_layout Standard

rest = PyTango.Group("rest")
\end_layout

\begin_layout Standard

rest.add(["marge/simpson/*","bart/simpson/*"])
\end_layout

\begin_layout Standard

all = PyTango.Group("All family")
\end_layout

\begin_layout Standard

all.add(homer)
\end_layout

\begin_layout Standard

all.add(rest)
\end_layout

\begin_layout Standard


\backslash
end{verbatim}
\end_layout

\end_inset


\end_layout

\begin_layout Subsubsection
remove()
\end_layout

\begin_layout Standard
Removes any group or device which name matches the specified pattern.
\end_layout

\begin_layout Itemize
Parameters :
\end_layout

\begin_deeper
\begin_layout Itemize
pattern : string pattern
\end_layout

\begin_layout Itemize
fwd : (optional) if set to True (the default), the request is also forwarded
 to subgroups.
 Otherwise, it is only applied to the local set of devices.
 
\end_layout

\end_deeper
\begin_layout Itemize
Return : None
\end_layout

\begin_layout Subsubsection
remove_all()
\end_layout

\begin_layout Standard
Removes all elements in the group.
 After such a call, the group is empty.
\end_layout

\begin_layout Itemize
Parameters : None
\end_layout

\begin_layout Itemize
Return : None
\end_layout

\begin_layout Subsubsection
contains()
\end_layout

\begin_layout Standard
Determines if the hierarchy contains groups and/or devices which name matches
 the specified pattern.
\end_layout

\begin_layout Itemize
Parameters:
\end_layout

\begin_deeper
\begin_layout Itemize
pattern : string pattern
\end_layout

\begin_layout Itemize
fwd : (optional) if set to True (the default), the request is also forwarded
 to subgroups.
 Otherwise, it is only applied to the local set of devices.
 
\end_layout

\end_deeper
\begin_layout Itemize
Return: True if the pattern is matched by an element of the group or False
 otherwise.
\end_layout

\begin_layout Subsubsection
get_size()
\end_layout

\begin_layout Standard
Return the number of devices in the hierarchy.
\end_layout

\begin_layout Itemize
Parameters:
\end_layout

\begin_deeper
\begin_layout Itemize
fwd : (optional) if set to True (the default), the request is also forwarded
 to subgroups.
 Otherwise, it is only applied to the local set of devices.
 
\end_layout

\end_deeper
\begin_layout Itemize
Return: the number of devices.
\end_layout

\begin_layout Subsubsection
get_device_list()
\end_layout

\begin_layout Standard
Returns the list of devices currently in the hierarchy.
 
\end_layout

\begin_layout Itemize
Parameters:
\end_layout

\begin_deeper
\begin_layout Itemize
fwd : (optional) if set to True (the default), the request is also forwarded
 to subgroups.
 Otherwise, it is only applied to the local set of devices.
 
\end_layout

\end_deeper
\begin_layout Itemize
Return: a list of device names
\end_layout

\begin_layout Subsubsection
get_device()
\end_layout

\begin_layout Standard
Returns a reference to the "idx-th" device in the hierarchy or None if the
 hierarchy contains less than "idx" devices.
\end_layout

\begin_layout Itemize
Parameters:
\end_layout

\begin_deeper
\begin_layout Itemize
idx: the element to be retrieved.
 The first element has idx = 1 
\shape italic
or
\end_layout

\begin_deeper
\begin_layout Standard
name: the device name to be retrieved.
\end_layout

\end_deeper
\end_deeper
\begin_layout Itemize
Return: the corresponding PyTango.DeviceProxy device object
\end_layout

\begin_layout Subsubsection
get_name()
\end_layout

\begin_layout Standard
Obtains the user name of the group.
\end_layout

\begin_layout Itemize
Parameters: None.
\end_layout

\begin_layout Itemize
Return: the group name.
\end_layout

\begin_layout Subsubsection
get_fully_qualified_name()
\end_layout

\begin_layout Standard
Obtains the complete (dot separated) name of the group.
\end_layout

\begin_layout Itemize
Parameters: None.
\end_layout

\begin_layout Itemize
Return: the full group name.
\end_layout

\begin_layout Subsubsection
enable()
\end_layout

\begin_layout Standard
Enables the given element in the group.
\end_layout

\begin_layout Itemize
Parameters:
\end_layout

\begin_deeper
\begin_layout Itemize
device name: the name of the device element
\end_layout

\begin_layout Itemize
fwd: (optional) if set to True (the default), the request is also forwarded
 to subgroups.
 Otherwise, it is only applied to the local set of devices.
 
\end_layout

\end_deeper
\begin_layout Itemize
Return: None.
\end_layout

\begin_layout Subsubsection
disable()
\end_layout

\begin_layout Standard
Disables the given element in the group.
\end_layout

\begin_layout Itemize
Parameters:
\end_layout

\begin_deeper
\begin_layout Itemize
device name : the name of the device element
\end_layout

\begin_layout Itemize
fwd : (optional) if set to True (the default), the request is also forwarded
 to subgroups.
 Otherwise, it is only applied to the local set of devices.
 
\end_layout

\end_deeper
\begin_layout Itemize
Return: None.
\end_layout

\begin_layout Subsubsection
command_inout()
\end_layout

\begin_layout Standard
Executes a Tango command on a group.
 There are three variants decribed below.
 
\end_layout

\begin_layout Enumerate
Commands without input arguments
\end_layout

\begin_deeper
\begin_layout Itemize
Parameters:
\end_layout

\begin_deeper
\begin_layout Itemize
command name: the name of the command
\end_layout

\begin_layout Itemize
fwd : if set to True, the request is also forwarded to subgroups.
 Otherwise, it is only applied to the local set of devices.
 Attention: there is no default value for this parameter.
\end_layout

\end_deeper
\begin_layout Itemize
Return: a list of PyTango.GroupReply objects
\end_layout

\begin_layout Itemize
Example : 
\begin_inset ERT
status open

\begin_layout Standard


\backslash
begin{verbatim}
\end_layout

\begin_layout Standard

homer = PyTango.Group("homer")
\end_layout

\begin_layout Standard

homer.add("homer/simpson/*")
\end_layout

\begin_layout Standard

homer.command_inout("Eat",True)
\end_layout

\begin_layout Standard


\backslash
end{verbatim}
\end_layout

\end_inset


\end_layout

\end_deeper
\begin_layout Enumerate
Commands with the same argument for all devices
\end_layout

\begin_deeper
\begin_layout Itemize
Parameters:
\end_layout

\begin_deeper
\begin_layout Itemize
command name: the name of the command
\end_layout

\begin_layout Itemize
argin: python object containing the input argument
\end_layout

\begin_layout Itemize
fwd : if set to True, the request is also forwarded to subgroups.
 Otherwise, it is only applied to the local set of devices.
 Attention: there is no default value for this parameter.
\end_layout

\end_deeper
\begin_layout Itemize
Return: a list of PyTango.GroupReply objects
\end_layout

\begin_layout Itemize
Example : 
\begin_inset ERT
status open

\begin_layout Standard


\backslash
begin{verbatim}
\end_layout

\begin_layout Standard

homer = PyTango.Group("homer")
\end_layout

\begin_layout Standard

homer.add("homer/simpson/*")
\end_layout

\begin_layout Standard

\end_layout

\begin_layout Standard

# cmd with argin being a DevLong
\end_layout

\begin_layout Standard

homer.command_inout("Sleep",100)
\end_layout

\begin_layout Standard

\end_layout

\begin_layout Standard

# cmd with argin being a DevVarStringArray
\end_layout

\begin_layout Standard

homer.command_inout("Drink",["beer","wine"],True) 
\end_layout

\begin_layout Standard


\backslash
end{verbatim}
\end_layout

\end_inset


\end_layout

\end_deeper
\begin_layout Enumerate
Commands with a specific arguments for each device.In order to use this last
 variant the user must have an "a priori" and "perfect" knowledge of the
 devices order in the group.
 
\end_layout

\begin_deeper
\begin_layout Itemize
Parameters:
\end_layout

\begin_deeper
\begin_layout Itemize
command name: the name of the command
\end_layout

\begin_layout Itemize
argin: a list containing python objects (representing the input arguments)
 for each device in the group.
 The number of elements in the list must match the number of devices in
 the group.
\end_layout

\begin_layout Itemize
fwd : if set to True, the request is also forwarded to subgroups.
 Otherwise, it is only applied to the local set of devices.
 Attention: there is no default value for this parameter.
\end_layout

\end_deeper
\begin_layout Itemize
Return: a list of PyTango.GroupReply objects
\end_layout

\begin_layout Itemize
Example : 
\begin_inset ERT
status open

\begin_layout Standard


\backslash
begin{verbatim}
\end_layout

\begin_layout Standard

simpsons = PyTango.Group("Simpsons")
\end_layout

\begin_layout Standard

simpsons.add("the/simpsons/homer")
\end_layout

\begin_layout Standard

simpsons.add("the/simpsons/marge")
\end_layout

\begin_layout Standard

simpsons.add("the/simpsons/bart")
\end_layout

\begin_layout Standard

simpsons.add("the/simpsons/lisa")
\end_layout

\begin_layout Standard

\end_layout

\begin_layout Standard

# cmd with argin being a DevLong
\end_layout

\begin_layout Standard

simpsons.command_inout("Sleep",[10,20,30,40],True)
\end_layout

\begin_layout Standard

\end_layout

\begin_layout Standard

# cmd with argin being a DevVarStringArray
\end_layout

\begin_layout Standard

homer.command_inout("Drink",[["beer","wine"],["water"],["water"],["water"]],True)
 
\end_layout

\begin_layout Standard


\backslash
end{verbatim}
\end_layout

\end_inset


\end_layout

\end_deeper
\begin_layout Subsubsection
command_inout_asynch()
\end_layout

\begin_layout Standard
Executes a Tango command on a group asynchronously.
 There are three variants decribed below.
 
\end_layout

\begin_layout Enumerate
Commands without input arguments
\end_layout

\begin_deeper
\begin_layout Itemize
Parameters:
\end_layout

\begin_deeper
\begin_layout Itemize
command name: the name of the command
\end_layout

\begin_layout Itemize
fgt: fire and forget flag.
 Attention: There is no default value for this parameter.
\end_layout

\begin_layout Itemize
fwd : if set to True, the request is also forwarded to subgroups.
 Otherwise, it is only applied to the local set of devices.
 Attention: There is no default value for this parameter.
\end_layout

\end_deeper
\begin_layout Itemize
Return: a request identifier
\end_layout

\begin_layout Itemize
Example : 
\begin_inset ERT
status open

\begin_layout Standard


\backslash
begin{verbatim}
\end_layout

\begin_layout Standard

homer = PyTango.Group("homer")
\end_layout

\begin_layout Standard

homer.add("homer/simpson/*")
\end_layout

\begin_layout Standard

homer.command_inout_asynch("Eat",False,True)
\end_layout

\begin_layout Standard


\backslash
end{verbatim}
\end_layout

\end_inset


\end_layout

\end_deeper
\begin_layout Enumerate
Commands with the same argument for all devices
\end_layout

\begin_deeper
\begin_layout Itemize
Parameters:
\end_layout

\begin_deeper
\begin_layout Itemize
command name: the name of the command
\end_layout

\begin_layout Itemize
argin: python object containing the input argument
\end_layout

\begin_layout Itemize
fgt: fire and forget flag.
 Attention: there is no default value for this parameter.
\end_layout

\begin_layout Itemize
fwd : if set to True, the request is also forwarded to subgroups.
 Otherwise, it is only applied to the local set of devices.
 Attention: there is no default value for this parameter.
\end_layout

\end_deeper
\begin_layout Itemize
Return: a request identifier
\end_layout

\begin_layout Itemize
Example : 
\begin_inset ERT
status open

\begin_layout Standard


\backslash
begin{verbatim}
\end_layout

\begin_layout Standard

homer = PyTango.Group("homer")
\end_layout

\begin_layout Standard

homer.add("homer/simpson/*")
\end_layout

\begin_layout Standard

\end_layout

\begin_layout Standard

# cmd with argin being a DevLong
\end_layout

\begin_layout Standard

homer.command_inout("Sleep",100,False,True)
\end_layout

\begin_layout Standard

\end_layout

\begin_layout Standard

# cmd with argin being a DevVarStringArray
\end_layout

\begin_layout Standard

homer.command_inout_asynch("Drink",["beer","wine"],False,True) 
\end_layout

\begin_layout Standard


\backslash
end{verbatim}
\end_layout

\end_inset


\end_layout

\end_deeper
\begin_layout Enumerate
Commands with a specific arguments for each device.In order to use this last
 variant the user must have an "a priori" and "perfect" knowledge of the
 devices order in the group.
 
\end_layout

\begin_deeper
\begin_layout Itemize
Parameters:
\end_layout

\begin_deeper
\begin_layout Itemize
command name: the name of the command
\end_layout

\begin_layout Itemize
argin: a list containing python objects (representing the input arguments)
 for each device in the group.
 The number of elements in the list must match the number of devices in
 the group.
\end_layout

\begin_layout Itemize
fgt: fire and forget flag.
 Attention: there is no default value for this parameter.
\end_layout

\begin_layout Itemize
fwd : if set to True, the request is also forwarded to subgroups.
 Otherwise, it is only applied to the local set of devices.
 Attention: there is no default value for this parameter.
\end_layout

\end_deeper
\begin_layout Itemize
Return: a request identifier
\end_layout

\begin_layout Itemize
Example : 
\begin_inset ERT
status open

\begin_layout Standard


\backslash
begin{verbatim}
\end_layout

\begin_layout Standard

simpsons = PyTango.Group("Simpsons")
\end_layout

\begin_layout Standard

simpsons.add("the/simpsons/homer")
\end_layout

\begin_layout Standard

simpsons.add("the/simpsons/marge")
\end_layout

\begin_layout Standard

simpsons.add("the/simpsons/bart")
\end_layout

\begin_layout Standard

simpsons.add("the/simpsons/lisa")
\end_layout

\begin_layout Standard

\end_layout

\begin_layout Standard

# cmd with argin being a DevLong
\end_layout

\begin_layout Standard

req_id = simpsons.command_inout_asynch("Sleep",[10,20,30,40],False,True)
\end_layout

\begin_layout Standard

res = command_inout_reply(req_id)
\end_layout

\begin_layout Standard

\end_layout

\begin_layout Standard

# cmd with argin being a DevVarStringArray
\end_layout

\begin_layout Standard

req_id = homer.command_inout_asynch("Drink",[["beer"],["water"],["water"],["water
"]],False,True)
\end_layout

\begin_layout Standard

res = command_inout_reply(req_id)
\end_layout

\begin_layout Standard


\backslash
end{verbatim}
\end_layout

\end_inset


\end_layout

\end_deeper
\begin_layout Subsubsection
command_inout_reply()
\end_layout

\begin_layout Standard
Returns the result of an asynchronous command.
\end_layout

\begin_layout Itemize
Parameters:
\end_layout

\begin_deeper
\begin_layout Itemize
req_id : request identifier
\end_layout

\begin_layout Itemize
timeout_ms : (optional, default value 0) the timeout in miliseconds.
 If timeout_ms is set to 0 ,method waits indefinitely
\end_layout

\end_deeper
\begin_layout Itemize
Return: a list of PyTango.GroupReply objects
\end_layout

\begin_layout Subsubsection
read_attribute()
\end_layout

\begin_layout Standard
Reads an attribute on each device in the group.
\end_layout

\begin_layout Itemize
Parameters:
\end_layout

\begin_deeper
\begin_layout Itemize
attribute name: the name of the attribute
\end_layout

\begin_layout Itemize
fwd : (optional) if set to True (the default), the request is also forwarded
 to subgroups.
 Otherwise, it is only applied to the local set of devices.
\end_layout

\end_deeper
\begin_layout Itemize
Return: a list of PyTango.GroupReply objects
\end_layout

\begin_layout Subsubsection
read_attribute_asynch()
\end_layout

\begin_layout Standard
Reads an attribute on each device in the group asynchronously.
\end_layout

\begin_layout Itemize
Parameters:
\end_layout

\begin_deeper
\begin_layout Itemize
attribute name: the name of the attribute
\end_layout

\begin_layout Itemize
fwd : (optional) if set to True (the default), the request is also forwarded
 to subgroups.
 Otherwise, it is only applied to the local set of devices.
\end_layout

\end_deeper
\begin_layout Itemize
Return: a request identifier
\end_layout

\begin_layout Subsubsection
read_attribute_reply()
\end_layout

\begin_layout Standard
Returns the result of an asynchronous read attribute request.
\end_layout

\begin_layout Itemize
Parameters:
\end_layout

\begin_deeper
\begin_layout Itemize
req_id : request identifier
\end_layout

\begin_layout Itemize
timeout_ms : (optional, default value 0) the timeout in miliseconds.
 If timeout_ms is set to 0 ,method waits indefinitely
\end_layout

\end_deeper
\begin_layout Itemize
Return: a list of PyTango.GroupReply objects
\end_layout

\begin_layout Subsubsection
read_attributes()
\end_layout

\begin_layout Standard
Reads several attributes on each device in the group.
\end_layout

\begin_layout Itemize
Parameters:
\end_layout

\begin_deeper
\begin_layout Itemize
attribute list: list of attribute names
\end_layout

\begin_layout Itemize
fwd : (optional) if set to True (the default), the request is also forwarded
 to subgroups.
 Otherwise, it is only applied to the local set of devices.
\end_layout

\end_deeper
\begin_layout Itemize
Return: a list of PyTango.GroupReply objects
\end_layout

\begin_layout Subsubsection
read_attributes_asynch()
\end_layout

\begin_layout Standard
Reads an attribute on each device in the group asynchronously.
\end_layout

\begin_layout Itemize
Parameters:
\end_layout

\begin_deeper
\begin_layout Itemize
attribute list: list of attribute names
\end_layout

\begin_layout Itemize
fwd : (optional) if set to True (the default), the request is also forwarded
 to subgroups.
 Otherwise, it is only applied to the local set of devices.
\end_layout

\end_deeper
\begin_layout Itemize
Return: a request identifier
\end_layout

\begin_layout Subsubsection
read_attributes_reply()
\end_layout

\begin_layout Itemize
Parameters:
\end_layout

\begin_deeper
\begin_layout Itemize
req_id : request identifier
\end_layout

\begin_layout Itemize
timeout_ms : (optional, default value 0) the timeout in miliseconds.
 If timeout_ms is set to 0 ,method waits indefinitely
\end_layout

\end_deeper
\begin_layout Itemize
Return: a list of PyTango.GroupReply objects
\end_layout

\begin_layout Subsubsection
write_attribute()
\end_layout

\begin_layout Standard
Writes an attribute on each device in the group.
 The variants of this method are described below
\end_layout

\begin_layout Enumerate
write the same value on all devices
\end_layout

\begin_deeper
\begin_layout Enumerate
Parameters:
\end_layout

\begin_deeper
\begin_layout Itemize
attribute_value : an AttributeValue structure that contains the attribute
 information
\end_layout

\begin_layout Itemize
fwd : (optional) if set to True (the default), the request is also forwarded
 to subgroups.
 Otherwise, it is only applied to the local set of devices.
\end_layout

\end_deeper
\begin_layout Itemize
Return: a list of PyTango.GroupReply objects
\end_layout

\begin_layout Enumerate
Parameters:
\end_layout

\begin_deeper
\begin_layout Itemize
attribute name: the name of the attribute
\end_layout

\begin_layout Itemize
value: the value to be written for all attributes
\end_layout

\begin_layout Itemize
fwd : (optional) if set to True (the default), the request is also forwarded
 to subgroups.
 Otherwise, it is only applied to the local set of devices.
\end_layout

\end_deeper
\begin_layout Itemize
Return: a list of PyTango.GroupReply objects
\end_layout

\begin_layout Itemize
Example:
\begin_inset ERT
status open

\begin_layout Standard


\backslash
begin{verbatim}
\end_layout

\begin_layout Standard

homer = PyTango.Group("homer")
\end_layout

\begin_layout Standard

homer.add("homer/simpson/*")
\end_layout

\begin_layout Standard

\end_layout

\begin_layout Standard

# scalar double attribute
\end_layout

\begin_layout Standard

weight = PyTango.AttributeValue()
\end_layout

\begin_layout Standard

weight.name = "weight"
\end_layout

\begin_layout Standard

weight.value = 89.45
\end_layout

\begin_layout Standard

res = homer.write_attribute(weight)
\end_layout

\begin_layout Standard

\end_layout

\begin_layout Standard

# second alternative:
\end_layout

\begin_layout Standard

res = homer.write_attribute("weight",89.45)
\end_layout

\begin_layout Standard


\backslash
end{verbatim}
\end_layout

\end_inset


\end_layout

\end_deeper
\begin_layout Enumerate
write an attribute with a specific values for each device.In order to use
 this last variant the user must have an "a priori" and "perfect" knowledge
 of the devices order in the group.
\end_layout

\begin_deeper
\begin_layout Itemize
Parameters:
\end_layout

\begin_deeper
\begin_layout Itemize
attribute name : the name of the attribute
\end_layout

\begin_layout Itemize
value : the attribute value or list of values (a)
\end_layout

\begin_layout Itemize
fwd : (optional) if set to True (the default), the request is also forwarded
 to subgroups.
 Otherwise, it is only applied to the local set of devices.
\end_layout

\begin_layout Enumerate
Note: In case a list of values is given, this method supports only non String,
 SCALAR and SPECTRUM attributes.
\end_layout

\end_deeper
\begin_layout Itemize
Return: a list of PyTango.GroupReply objects
\end_layout

\begin_layout Itemize
Example:
\begin_inset ERT
status open

\begin_layout Standard


\backslash
begin{verbatim}
\end_layout

\begin_layout Standard

homer = PyTango.Group("homer")
\end_layout

\begin_layout Standard

homer.add("homer/simpson/*")
\end_layout

\begin_layout Standard

\end_layout

\begin_layout Standard

# scalar double attribute
\end_layout

\begin_layout Standard

res = homer.write_attribute("weight",[89.45, 102.54, 69.2])
\end_layout

\begin_layout Standard

\end_layout

\begin_layout Standard

# spectrum long attribute
\end_layout

\begin_layout Standard

res = homer.write_attribute("attr_lspec",[[89, 45], [102], [54, 69, 2]])
\end_layout

\begin_layout Standard


\backslash
end{verbatim}
\end_layout

\end_inset


\end_layout

\end_deeper
\begin_layout Subsubsection
write_attribute_asynch()
\end_layout

\begin_layout Standard
Write an attribute on each device in the group asynchronously.
\end_layout

\begin_layout Enumerate
write the same value on all devices
\end_layout

\begin_deeper
\begin_layout Enumerate
Parameters:
\end_layout

\begin_deeper
\begin_layout Itemize
attribute_value : an AttributeValue structure that contains the attribute
 information
\end_layout

\begin_layout Itemize
fwd : (optional) if set to True (the default), the request is also forwarded
 to subgroups.
 Otherwise, it is only applied to the local set of devices.
\end_layout

\end_deeper
\begin_layout Itemize
Return: a list of PyTango.GroupReply objects
\end_layout

\begin_layout Enumerate
Parameters:
\end_layout

\begin_deeper
\begin_layout Itemize
attribute name: the name of the attribute
\end_layout

\begin_layout Itemize
value: the value to be written for all attributes
\end_layout

\begin_layout Itemize
fwd : (optional) if set to True (the default), the request is also forwarded
 to subgroups.
 Otherwise, it is only applied to the local set of devices.
\end_layout

\end_deeper
\begin_layout Itemize
Return: a request identifier
\end_layout

\begin_layout Itemize
Example:
\begin_inset ERT
status open

\begin_layout Standard


\backslash
begin{verbatim}
\end_layout

\begin_layout Standard

homer = PyTango.Group("homer")
\end_layout

\begin_layout Standard

homer.add("homer/simpson/*")
\end_layout

\begin_layout Standard

\end_layout

\begin_layout Standard

# scalar double attribute
\end_layout

\begin_layout Standard

weight = PyTango.AttributeValue()
\end_layout

\begin_layout Standard

weight.name = "weight"
\end_layout

\begin_layout Standard

weight.value = 89.45
\end_layout

\begin_layout Standard

req_id = homer.write_attribute_asynch(weight)
\end_layout

\begin_layout Standard

res = homer.write_attribute_reply(req_id)
\end_layout

\begin_layout Standard

\end_layout

\begin_layout Standard

# second alternative:
\end_layout

\begin_layout Standard

req_id = homer.write_attribute_asynch("weight",89.45)
\end_layout

\begin_layout Standard

res = homer.write_attribute_reply(req_id)
\end_layout

\begin_layout Standard


\backslash
end{verbatim}
\end_layout

\end_inset


\end_layout

\end_deeper
\begin_layout Enumerate
write an attribute with a specific values for each device.In order to use
 this last variant the user must have an "a priori" and "perfect" knowledge
 of the devices order in the group.
\end_layout

\begin_deeper
\begin_layout Itemize
Parameters:
\end_layout

\begin_deeper
\begin_layout Itemize
attribute name : the name of the attribute
\end_layout

\begin_layout Itemize
value : the attribute value or list of values (a)
\end_layout

\begin_layout Itemize
fwd : (optional) if set to True (the default), the request is also forwarded
 to subgroups.
 Otherwise, it is only applied to the local set of devices.
\end_layout

\begin_layout Enumerate
Note: In case a list of values is given, this method supports only non String,
 SCALAR and SPECTRUM attributes.
\end_layout

\end_deeper
\begin_layout Itemize
Return: a request identifier
\end_layout

\begin_layout Itemize
Example:
\begin_inset ERT
status open

\begin_layout Standard


\backslash
begin{verbatim}
\end_layout

\begin_layout Standard

homer = PyTango.Group("homer")
\end_layout

\begin_layout Standard

homer.add("homer/simpson/*")
\end_layout

\begin_layout Standard

\end_layout

\begin_layout Standard

# scalar double attribute
\end_layout

\begin_layout Standard

req_id = homer.write_attribute_asynch("weight",[89.45, 102.54, 69.2])
\end_layout

\begin_layout Standard

res = homer.write_attribute_reply(req_id)
\end_layout

\begin_layout Standard

\end_layout

\begin_layout Standard

# spectrum long attribute
\end_layout

\begin_layout Standard

req_id = homer.write_attribute_asynch("attr_lspec",[[89, 45], [102], [54,
 69, 2]])
\end_layout

\begin_layout Standard

res = homer.write_attribute_reply(req_id)
\end_layout

\begin_layout Standard


\backslash
end{verbatim}
\end_layout

\end_inset


\end_layout

\end_deeper
\begin_layout Subsubsection
write_attribute_reply()
\end_layout

\begin_layout Standard
Returns the result of an asynchronous write attribute request.
\end_layout

\begin_layout Itemize
Parameters:
\end_layout

\begin_layout Itemize
req_id : request identifier
\end_layout

\begin_deeper
\begin_layout Itemize
timeout_ms : (optional, default value 0) the timeout in miliseconds.
 If timeout_ms is set to 0 ,method waits indefinitely
\end_layout

\end_deeper
\begin_layout Itemize
Return: a list of PyTango.GroupReply objects
\end_layout

\begin_layout Section
The Tango Database Python API
\end_layout

\begin_layout Standard
The PyTango allows access from Python environment to the following Tango
 high level C++ Database classes and structures: 
\end_layout

\begin_layout Itemize
DbDevInfo 
\end_layout

\begin_layout Itemize
DbDevImportInfo 
\end_layout

\begin_layout Itemize
DbDevExportInfo 
\end_layout

\begin_layout Itemize
Database 
\end_layout

\begin_layout Subsection
DbDevInfo
\end_layout

\begin_layout Standard
A structure containing available information for a device with the following
 members: 
\end_layout

\begin_layout Itemize
name: string 
\end_layout

\begin_layout Itemize
_class: string 
\end_layout

\begin_layout Itemize
server: string 
\end_layout

\begin_layout Subsection
DbDevExportInfo
\end_layout

\begin_layout Standard
Export info for a device with the following members: 
\end_layout

\begin_layout Itemize
name: device name 
\end_layout

\begin_layout Itemize
ior: CORBA reference of the device 
\end_layout

\begin_layout Itemize
host: name of the computer hosting the server 
\end_layout

\begin_layout Itemize
version: string 
\end_layout

\begin_layout Itemize
pid: process identifier 
\end_layout

\begin_layout Subsection
Database
\end_layout

\begin_layout Standard
Database is the high level Tango object which contains the link to the static
 database.
 Database provides methods for all database commands: get_device_property(),
 info(), etc.
 To create a Database, use the default constructor: 
\begin_inset ERT
status collapsed

\begin_layout Standard


\backslash
begin{verbatim}
\end_layout

\begin_layout Standard

db = Database()
\end_layout

\begin_layout Standard


\backslash
end{verbatim}
\end_layout

\end_inset

 The constructor uses the TANGO_HOST environment variable to determine which
 instance of the Database to connect to.
 Alternatively you can specify host and port: 
\begin_inset ERT
status collapsed

\begin_layout Standard


\backslash
begin{verbatim}
\end_layout

\begin_layout Standard

db = Database('host', port)
\end_layout

\begin_layout Standard


\backslash
end{verbatim}
\end_layout

\end_inset


\end_layout

\begin_layout Subsubsection
get_db_host()
\end_layout

\begin_layout Standard
Returns the host.
\end_layout

\begin_layout Standard
New in PyTango 3.0.4
\end_layout

\begin_layout Itemize
Parameters: None
\end_layout

\begin_layout Itemize
Return : a string containing the host
\end_layout

\begin_layout Subsubsection
get_db_port()
\end_layout

\begin_layout Standard
Returns the port number.
\end_layout

\begin_layout Standard
New in PyTango 3.0.4
\end_layout

\begin_layout Itemize
Parameters: None
\end_layout

\begin_layout Itemize
Return : a string containing the port number
\end_layout

\begin_layout Subsubsection
get_db_port_num()
\end_layout

\begin_layout Standard
Returns the port number (int).
\end_layout

\begin_layout Standard
New in PyTango 3.0.4
\end_layout

\begin_layout Itemize
Parameters: None
\end_layout

\begin_layout Itemize
Return : the port number
\end_layout

\begin_layout Subsubsection
get_info()
\end_layout

\begin_layout Standard
Query the database for some general info about the tables.
 
\end_layout

\begin_layout Itemize
Parameters: None 
\end_layout

\begin_layout Itemize
Return : a multi-line string 
\end_layout

\begin_layout Subsubsection
add_device()
\end_layout

\begin_layout Standard
Add a device to the database.
 The device name, server and class are specified in the DbDevInfo structure.
 
\end_layout

\begin_layout Itemize
Parameters: DbDevInfo structure 
\end_layout

\begin_layout Itemize
Return : None 
\end_layout

\begin_layout Itemize
Example: 
\begin_inset ERT
status collapsed

\begin_layout Standard


\backslash
begin{verbatim}
\end_layout

\begin_layout Standard

dev_info = DbDevInfo()
\end_layout

\begin_layout Standard

dev_info.name = "my/own/device"
\end_layout

\begin_layout Standard

dev_info.class = "MyDevice"
\end_layout

\begin_layout Standard

dev_info.server = "MyServer/test"
\end_layout

\begin_layout Standard

db.add_device(dev_info)
\end_layout

\begin_layout Standard


\backslash
end{verbatim}
\end_layout

\end_inset


\end_layout

\begin_layout Subsubsection
delete_device()
\end_layout

\begin_layout Standard
Delete the device of the specified name from the database 
\end_layout

\begin_layout Itemize
Parameters: Device name 
\end_layout

\begin_layout Itemize
Return : None 
\end_layout

\begin_layout Itemize
Example: 
\begin_inset ERT
status collapsed

\begin_layout Standard


\backslash
begin{verbatim}
\end_layout

\begin_layout Standard

db.delete_device("my/own/device")
\end_layout

\begin_layout Standard


\backslash
end{verbatim}
\end_layout

\end_inset


\end_layout

\begin_layout Subsubsection
import_device()
\end_layout

\begin_layout Standard
Query the databse for the import info of the specified device.
 
\end_layout

\begin_layout Itemize
Parameters: Device name 
\end_layout

\begin_layout Itemize
Return : DbDevImportInfo object 
\end_layout

\begin_layout Itemize
Example: 
\begin_inset ERT
status collapsed

\begin_layout Standard


\backslash
begin{verbatim}
\end_layout

\begin_layout Standard

dev_imp_info = db.import_device("my/own/device")
\end_layout

\begin_layout Standard

print dev_imp_info.name
\end_layout

\begin_layout Standard

print dev_imp_info.exported
\end_layout

\begin_layout Standard

print dev_imp_info.ior
\end_layout

\begin_layout Standard

print dev_imp_info.version
\end_layout

\begin_layout Standard


\backslash
end{verbatim}
\end_layout

\end_inset


\end_layout

\begin_layout Subsubsection
export_device()
\end_layout

\begin_layout Standard
Update the export info for this device in the database.
 
\end_layout

\begin_layout Itemize
Parameters: DbDevExportInfo structure 
\end_layout

\begin_layout Itemize
Return : None 
\end_layout

\begin_layout Itemize
Example: 
\begin_inset ERT
status collapsed

\begin_layout Standard


\backslash
begin{verbatim}
\end_layout

\begin_layout Standard

dev_export = DbDevExportInfo()
\end_layout

\begin_layout Standard

dev_export.name = "my/own/device"
\end_layout

\begin_layout Standard

dev_export.ior = "the real ior"
\end_layout

\begin_layout Standard

dev_export.host = "the host"
\end_layout

\begin_layout Standard

dev_export.version = "1.0"
\end_layout

\begin_layout Standard

dev_export.pid = "...."
\end_layout

\begin_layout Standard

db.export_device(dev_export)
\end_layout

\begin_layout Standard


\backslash
end{verbatim}
\end_layout

\end_inset


\end_layout

\begin_layout Subsubsection
unexport_device()
\end_layout

\begin_layout Standard
Mark the specified device as unexported in the database.
 
\end_layout

\begin_layout Itemize
Parameters: Device name 
\end_layout

\begin_layout Itemize
Return : None 
\end_layout

\begin_layout Itemize
Example: 
\begin_inset ERT
status collapsed

\begin_layout Standard


\backslash
begin{verbatim}
\end_layout

\begin_layout Standard

db.unexport_device("my/own/device")
\end_layout

\begin_layout Standard


\backslash
end{verbatim}
\end_layout

\end_inset


\end_layout

\begin_layout Subsubsection
add_server()
\end_layout

\begin_layout Standard
Add a group of devices to the database.
 
\end_layout

\begin_layout Itemize
Parameters: 
\end_layout

\begin_deeper
\begin_layout Itemize
Server name 
\end_layout

\begin_layout Itemize
List of DbDevInfo structures 
\end_layout

\end_deeper
\begin_layout Itemize
Return : None 
\end_layout

\begin_layout Subsubsection
delete_server()
\end_layout

\begin_layout Standard
Delete the device server and its associated devices from database.
 
\end_layout

\begin_layout Itemize
Parameters: Server name 
\end_layout

\begin_layout Itemize
Return : None 
\end_layout

\begin_layout Subsubsection
export_server()
\end_layout

\begin_layout Standard
Export a group of devices to the database.
 
\end_layout

\begin_layout Itemize
Parameters: 
\end_layout

\begin_deeper
\begin_layout Itemize
Server name 
\end_layout

\begin_layout Itemize
List of DbDevExportInfo structures 
\end_layout

\end_deeper
\begin_layout Itemize
Return : None 
\end_layout

\begin_layout Subsubsection
unexport_server()
\end_layout

\begin_layout Standard
Mark all devices exported for this server as unexported.
 
\end_layout

\begin_layout Itemize
Parameters: Server name 
\end_layout

\begin_layout Itemize
Return : None 
\end_layout

\begin_layout Subsubsection
get_services()
\end_layout

\begin_layout Standard
Query database for specified services.
\end_layout

\begin_layout Standard
New in PyTango 3.0.4
\end_layout

\begin_layout Itemize
Parameters: 
\end_layout

\begin_deeper
\begin_layout Itemize
Service name
\end_layout

\begin_layout Itemize
instance name (can be a wildcard character ('*'))
\end_layout

\end_deeper
\begin_layout Itemize
Return : list of available services
\end_layout

\begin_layout Subsubsection
register_service()
\end_layout

\begin_layout Standard
Register the specified service wihtin the database.
\end_layout

\begin_layout Standard
New in PyTango 3.0.4
\end_layout

\begin_layout Itemize
Parameters: 
\end_layout

\begin_deeper
\begin_layout Itemize
Service name
\end_layout

\begin_layout Itemize
instance name
\end_layout

\begin_layout Itemize
device name
\end_layout

\end_deeper
\begin_layout Itemize
Return : None
\end_layout

\begin_layout Subsubsection
unregister_service()
\end_layout

\begin_layout Standard
Unregister the specified service from the database.
\end_layout

\begin_layout Standard
New in PyTango 3.0.4
\end_layout

\begin_layout Itemize
Parameters: 
\end_layout

\begin_deeper
\begin_layout Itemize
Service name
\end_layout

\begin_layout Itemize
instance name
\end_layout

\end_deeper
\begin_layout Itemize
Return : None
\end_layout

\begin_layout Subsubsection
get_host_list()
\end_layout

\begin_layout Standard
Returns the list of all host names registered in the database which match
 the specified wildcard (eg: 'l-c0*')
\end_layout

\begin_layout Standard
New in PyTango 3.0.4
\end_layout

\begin_layout Itemize
Parameters:
\end_layout

\begin_deeper
\begin_layout Itemize
host name: optional (defaults to '*')
\end_layout

\end_deeper
\begin_layout Itemize
Return : List of registered host names
\end_layout

\begin_layout Subsubsection
get_server_class_list()
\end_layout

\begin_layout Standard
Query the database for a list of classes instancied by the specified server.
 The DServer class exists in all TANGO servers and for this reason this
 class is removed from the returned list.
\end_layout

\begin_layout Standard
New in PyTango 3.0.4
\end_layout

\begin_layout Itemize
Parameters:
\end_layout

\begin_deeper
\begin_layout Itemize
server string in format <ServerName>/<instance>
\end_layout

\end_deeper
\begin_layout Itemize
Return : list of class names instanciated by the specified server
\end_layout

\begin_layout Subsubsection
get_server_name_list()
\end_layout

\begin_layout Standard
Return the list of all server names registered in the database.
\end_layout

\begin_layout Standard
New in PyTango 3.0.4
\end_layout

\begin_layout Itemize
Return : list of server names
\end_layout

\begin_layout Subsubsection
get_instance_name_list()
\end_layout

\begin_layout Standard
Return the list of all instance names existing in the database for the specifed
 server.
\end_layout

\begin_layout Standard
New in PyTango 3.0.4
\end_layout

\begin_layout Itemize
Parameters:
\end_layout

\begin_deeper
\begin_layout Itemize
server name
\end_layout

\end_deeper
\begin_layout Itemize
Return : list of instance names
\end_layout

\begin_layout Subsubsection
get_server_list()
\end_layout

\begin_layout Standard
Return the list of all servers registered in the database which match the
 specified wildcard (eg: 'Serial/*').
\end_layout

\begin_layout Standard
New in PyTango 3.0.4
\end_layout

\begin_layout Itemize
Parameters:
\end_layout

\begin_deeper
\begin_layout Itemize
Server: optional (defaults to '*/*')
\end_layout

\end_deeper
\begin_layout Itemize
Return : list of servers
\end_layout

\begin_layout Subsubsection
get_host_server_list()
\end_layout

\begin_layout Standard
Query the database for a list of servers registred on the specified host
 (we refer 'host' in the context of tango device, i.e.
 following the tango naming convention 'host/family/member')
\end_layout

\begin_layout Standard
New in PyTango 3.0.4
\end_layout

\begin_layout Itemize
Parameters:
\end_layout

\begin_deeper
\begin_layout Itemize
host name
\end_layout

\end_deeper
\begin_layout Itemize
Return : list of matching servers
\end_layout

\begin_layout Subsubsection
get_server_info()
\end_layout

\begin_layout Standard
Query the database for server information.
\end_layout

\begin_layout Standard
New in PyTango 3.0.4
\end_layout

\begin_layout Itemize
Parameters:
\end_layout

\begin_deeper
\begin_layout Itemize
server name
\end_layout

\end_deeper
\begin_layout Itemize
Return : A DbServerInfo with server information
\end_layout

\begin_layout Subsubsection
put_server_info()
\end_layout

\begin_layout Standard
Add/update server information in the database.
\end_layout

\begin_layout Standard
New in PyTango 3.0.4
\end_layout

\begin_layout Itemize
Parameters:
\end_layout

\begin_deeper
\begin_layout Itemize
DbServerInfo structure
\end_layout

\end_deeper
\begin_layout Itemize
Return : None
\end_layout

\begin_layout Subsubsection
delete_server_info()
\end_layout

\begin_layout Standard
Delete server information of the specifed server from the database.
\end_layout

\begin_layout Standard
New in PyTango 3.0.4
\end_layout

\begin_layout Itemize
Parameters:
\end_layout

\begin_deeper
\begin_layout Itemize
Server name
\end_layout

\end_deeper
\begin_layout Itemize
Return : None
\end_layout

\begin_layout Subsubsection
get_device_name()
\end_layout

\begin_layout Standard
Query the database for a list of devices served by a server for a given
 device class.
 
\end_layout

\begin_layout Itemize
Parameters: 
\end_layout

\begin_deeper
\begin_layout Itemize
Server name 
\end_layout

\begin_layout Itemize
Device class name 
\end_layout

\end_deeper
\begin_layout Itemize
Return : List of device names 
\end_layout

\begin_layout Subsubsection
get_alias()
\end_layout

\begin_layout Standard
Get the device alias name from its name.
\end_layout

\begin_layout Standard
New in PyTango 3.0.4
\end_layout

\begin_layout Itemize
Parameters:
\end_layout

\begin_deeper
\begin_layout Itemize
Device name
\end_layout

\end_deeper
\begin_layout Itemize
Return : device alias
\end_layout

\begin_layout Subsubsection
get_device_alias()
\end_layout

\begin_layout Standard
Query the database for a list of aliases for the specified device.
 
\end_layout

\begin_layout Itemize
Parameters: Device name 
\end_layout

\begin_layout Itemize
Return : List of aliases 
\end_layout

\begin_layout Subsubsection
get_device_exported()
\end_layout

\begin_layout Standard
Query the database for a list of exported devices whose names satisfy the
 supplied filter (* is wildcard for any character(s)).
 
\end_layout

\begin_layout Itemize
Parameters: string filter 
\end_layout

\begin_layout Itemize
Return : List of exported devices 
\end_layout

\begin_layout Subsubsection
get_device_domain()
\end_layout

\begin_layout Standard
Query the database for a list of of device domain names which match the
 wildcard provided (* is wildcard for any character(s)).
 Domain names are case insensitive.
 
\end_layout

\begin_layout Itemize
Parameters: string filter 
\end_layout

\begin_layout Itemize
Return : List of device domain names 
\end_layout

\begin_layout Subsubsection
get_device_family()
\end_layout

\begin_layout Standard
Query the database for a list of of device family names which match the
 wildcard provided (* is wildcard for any character(s)).
 Family names are case insensitive.
 
\end_layout

\begin_layout Itemize
Parameters: string filter 
\end_layout

\begin_layout Itemize
Return : List of device family names 
\end_layout

\begin_layout Subsubsection
get_device_member()
\end_layout

\begin_layout Standard
Query the database for a list of of device member names which match the
 wildcard provided (* is wildcard for any character(s)).
 Member names are case insensitive.
 
\end_layout

\begin_layout Itemize
Parameters: string filter 
\end_layout

\begin_layout Itemize
Return : List of device member names 
\end_layout

\begin_layout Subsubsection
get_device_class_list()
\end_layout

\begin_layout Standard
Query the database for a list of devices and classes served by the specified
 server.
 Return a list with the following structure:
\end_layout

\begin_layout Standard
[device name, class name, device name, class name, ...]
\end_layout

\begin_layout Standard
New in PyTango 3.0.4
\end_layout

\begin_layout Itemize
Parameters:
\end_layout

\begin_deeper
\begin_layout Itemize
server string in format <ServerName>/<instance>
\end_layout

\end_deeper
\begin_layout Itemize
Return : a list with the following structure: [device name, class name,
 device name, class name, ...]
\end_layout

\begin_layout Subsubsection
get_device_exported_for_class()
\end_layout

\begin_layout Standard
Query database for list of exported devices for the specified class.
\end_layout

\begin_layout Standard
New in PyTango 3.0.4
\end_layout

\begin_layout Itemize
Parameters : string class name
\end_layout

\begin_layout Itemize
Return : List of device names
\end_layout

\begin_layout Subsubsection
get_device_property_list()
\end_layout

\begin_layout Standard
Query the database for a list of of device property names which match the
 wildcard provided (* is wildcard for any character(s)).
\end_layout

\begin_layout Itemize
Parameters: 
\end_layout

\begin_deeper
\begin_layout Itemize
string: device name
\end_layout

\begin_layout Itemize
string: property name filter
\end_layout

\end_deeper
\begin_layout Itemize
Return : List of device property names 
\end_layout

\begin_layout Subsubsection
get_property()
\end_layout

\begin_layout Standard
Query the database for a list of object (i.e non-device) properties.
 
\end_layout

\begin_layout Itemize
Parameters: 
\end_layout

\begin_deeper
\begin_layout Itemize
string: object name 
\end_layout

\begin_layout Itemize
prop_list: list of property names 
\end_layout

\end_deeper
\begin_layout Itemize
Return : a dictionary which keys are the property names the value associated
 with each key being a list of strings representing the property value 
\end_layout

\begin_layout Subsubsection
put_property()
\end_layout

\begin_layout Standard
Insert or update a list of properties for the specified object.
 
\end_layout

\begin_layout Itemize
Parameters: 
\end_layout

\begin_deeper
\begin_layout Itemize
string: object name 
\end_layout

\begin_layout Itemize
props: a dictionary which keys are the property names the value associated
 with each key being a list of strings representing the property value 
\end_layout

\end_deeper
\begin_layout Itemize
Return : None 
\end_layout

\begin_layout Subsubsection
delete_property()
\end_layout

\begin_layout Standard
Delete a list of properties for the specified object.
 
\end_layout

\begin_layout Itemize
Parameters: 
\end_layout

\begin_deeper
\begin_layout Itemize
string: object name 
\end_layout

\begin_layout Itemize
prop_list: list of property names 
\end_layout

\end_deeper
\begin_layout Itemize
Return : None 
\end_layout

\begin_layout Subsubsection
get_device_property()
\end_layout

\begin_layout Standard
Query the database for a list of device properties.
 
\end_layout

\begin_layout Itemize
Parameters: 
\end_layout

\begin_deeper
\begin_layout Itemize
string: device name 
\end_layout

\begin_layout Itemize
prop_list: list of property names 
\end_layout

\end_deeper
\begin_layout Itemize
Return : a dictionary which keys are the property names the value associated
 with each key being a list of strings representing the property value 
\end_layout

\begin_layout Subsubsection
put_device_property()
\end_layout

\begin_layout Standard
Insert or update a list of properties for the specified device.
 
\end_layout

\begin_layout Itemize
Parameters: 
\end_layout

\begin_deeper
\begin_layout Itemize
string: device name 
\end_layout

\begin_layout Itemize
props: a dictionary which keys are the property names the value associated
 with each key being a list of strings representing the property value 
\end_layout

\end_deeper
\begin_layout Itemize
Return : None 
\end_layout

\begin_layout Itemize
Example : 
\begin_inset ERT
status collapsed

\begin_layout Standard


\backslash
begin{verbatim}
\end_layout

\begin_layout Standard

properties_logging={'logging
\backslash
_level':["DEBUG"],'logging
\backslash
_target':["device::tmp/log/1"]}
\end_layout

\begin_layout Standard

db.put_device_property("px1/tdl/mouse",properties_logging)
\end_layout

\begin_layout Standard


\backslash
end{verbatim}
\end_layout

\end_inset


\end_layout

\begin_layout Subsubsection
delete_device_property()
\end_layout

\begin_layout Standard
Delete a list of properties for the specified device.
 
\end_layout

\begin_layout Itemize
Parameters: 
\end_layout

\begin_deeper
\begin_layout Itemize
string: device name 
\end_layout

\begin_layout Itemize
prop_list: list of property names 
\end_layout

\end_deeper
\begin_layout Itemize
Return : None 
\end_layout

\begin_layout Subsubsection
get_device_attribute_property()
\end_layout

\begin_layout Standard
Query the database for a list of device attribute properties.
 
\end_layout

\begin_layout Itemize
Parameters: 
\end_layout

\begin_deeper
\begin_layout Itemize
string: device name 
\end_layout

\begin_layout Itemize
prop_list: list of attribute names 
\end_layout

\end_deeper
\begin_layout Itemize
Return : a dictionary which keys are the attribute names, the value associated
 with each key being another dictionary which keys are the attribute property
 names.
 
\end_layout

\begin_layout Subsubsection
put_device_attribute_property()
\end_layout

\begin_layout Standard
Insert or update a list of properties for the specified device attribute.
 
\end_layout

\begin_layout Itemize
Parameters: 
\end_layout

\begin_deeper
\begin_layout Itemize
string: device name 
\end_layout

\begin_layout Itemize
props: a dictionary which keys are the attribute names, the value associated
 with each key being another dictionary which keys are the attribute property
 names.
 
\end_layout

\end_deeper
\begin_layout Itemize
Return : None 
\end_layout

\begin_layout Itemize
Example : 
\begin_inset ERT
status collapsed

\begin_layout Standard


\backslash
begin{verbatim}
\end_layout

\begin_layout Standard

properties_positionX={"min_value": ["20"], 
\end_layout

\begin_layout Standard

                      "max_value": ["1000"], 
\end_layout

\begin_layout Standard

                      "min_alarm":["50"],
\end_layout

\begin_layout Standard

                      "max_alarm":["950"], 
\end_layout

\begin_layout Standard

                      "label":["Pos en pixel"],
\end_layout

\begin_layout Standard

                      "format":["%3d"]}
\end_layout

\begin_layout Standard

properties_positionY={"min_value": ["20"], 
\end_layout

\begin_layout Standard

                      "max_value": ["1000"], 
\end_layout

\begin_layout Standard

                      "min_alarm":["50"],
\end_layout

\begin_layout Standard

                      "max_alarm":["950"],
\end_layout

\begin_layout Standard

                      "label":["Pos en pixel"],
\end_layout

\begin_layout Standard

                      "format":["%3d"]}
\end_layout

\begin_layout Standard

attr_props_mouse = { "positionX": properties_positionX , 
\end_layout

\begin_layout Standard

                     "positionY": properties_positionY }
\end_layout

\begin_layout Standard

db.put_device_attribute_property(mouse_name, attr_props_mouse)
\end_layout

\begin_layout Standard


\backslash
end{verbatim}
\end_layout

\end_inset


\end_layout

\begin_layout Subsubsection
delete_device_attribute_property()
\end_layout

\begin_layout Standard
Delete a list of properties for the specified device attribute.
 
\end_layout

\begin_layout Itemize
Parameters: 
\end_layout

\begin_deeper
\begin_layout Itemize
string: device name 
\end_layout

\begin_layout Itemize
props: a dictionary with keys being the attribute names and the associated
 value a list with property names
\end_layout

\end_deeper
\begin_layout Itemize
Return : None 
\end_layout

\begin_layout Subsubsection
get_class_property()
\end_layout

\begin_layout Standard
Query the database for a list of device class properties.
 
\end_layout

\begin_layout Itemize
Parameters: 
\end_layout

\begin_deeper
\begin_layout Itemize
string: class name 
\end_layout

\begin_layout Itemize
prop_list: list of property names 
\end_layout

\end_deeper
\begin_layout Itemize
Return : a dictionary which keys are the property names the value associated
 with each key being a list of strings representing the property value 
\end_layout

\begin_layout Subsubsection
put_class_property()
\end_layout

\begin_layout Standard
Insert or update a list of properties for the specified device class.
 
\end_layout

\begin_layout Itemize
Parameters: 
\end_layout

\begin_deeper
\begin_layout Itemize
string: class name 
\end_layout

\begin_layout Itemize
props: a dictionary which keys are the property names the value associated
 with each key being a list of strings representing the property value 
\end_layout

\end_deeper
\begin_layout Itemize
Return : None 
\end_layout

\begin_layout Subsubsection
delete_class_property()
\end_layout

\begin_layout Standard
Delete a list of properties for the specified device class.
 
\end_layout

\begin_layout Itemize
Parameters: 
\end_layout

\begin_deeper
\begin_layout Itemize
string: class name 
\end_layout

\begin_layout Itemize
prop_list: list of property names 
\end_layout

\end_deeper
\begin_layout Itemize
Return : None 
\end_layout

\begin_layout Subsubsection
get_class_attribute_property()
\end_layout

\begin_layout Standard
Query the database for a list of device class attribute properties.
 
\end_layout

\begin_layout Itemize
Parameters: 
\end_layout

\begin_deeper
\begin_layout Itemize
string: class name 
\end_layout

\begin_layout Itemize
prop_list: list of property names 
\end_layout

\end_deeper
\begin_layout Itemize
Return : a dictionary which keys are the attribute names, the value associated
 with each key being another dictionary which keys are the attribute property
 names.
 
\end_layout

\begin_layout Subsubsection
put_class_attribute_property()
\end_layout

\begin_layout Standard
Insert or update a list of properties for the specified class attribute.
 
\end_layout

\begin_layout Itemize
Parameters: 
\end_layout

\begin_deeper
\begin_layout Itemize
string: class attribute name 
\end_layout

\begin_layout Itemize
props: a dictionary which keys are the attribute names, the value associated
 with each key being another dictionary which keys are the attribute property
 names.
 
\end_layout

\end_deeper
\begin_layout Itemize
Return : None 
\end_layout

\begin_layout Subsubsection
delete_class_attribute_property()
\end_layout

\begin_layout Standard
Delete a list of properties for the specified class attribute.
 
\end_layout

\begin_layout Itemize
Parameters: 
\end_layout

\begin_deeper
\begin_layout Itemize
string: class name 
\end_layout

\begin_layout Itemize
props: a dictionary with keys being the attribute names and the associated
 value a list with property names 
\end_layout

\end_deeper
\begin_layout Itemize
Return : None 
\end_layout

\begin_layout Subsubsection
put_device_alias()
\end_layout

\begin_layout Standard
Create an alias for a device.
 
\end_layout

\begin_layout Itemize
Parameters: 
\end_layout

\begin_deeper
\begin_layout Itemize
string: device name 
\end_layout

\begin_layout Itemize
string: alias name
\end_layout

\end_deeper
\begin_layout Itemize
Return : None 
\end_layout

\begin_layout Subsubsection
delete_device_alias()
\end_layout

\begin_layout Standard
Delete a device alias.
 
\end_layout

\begin_layout Itemize
Parameters:
\end_layout

\begin_deeper
\begin_layout Itemize
string: alias name
\end_layout

\end_deeper
\begin_layout Itemize
Return : None 
\end_layout

\begin_layout Section
Tango Device Server in Python
\end_layout

\begin_layout Standard
This chapter does not explain what a Tango device or a device server is.
 This is explained in details in "The Tango control system manual" available
 at http://www.tango-controls.org/TangoKernel.
\end_layout

\begin_layout Standard
The device server we will detailed in the following example is a Tango device
 server with one Tango class called PyDsExp.
 This class has two commands called IOLong and IOStringArray and two attributes
 called Long_attr and Short_attr_rw.
\end_layout

\begin_layout Subsection
Importing python modules
\end_layout

\begin_layout Standard
To write a Python script which is a Tango device server, you need to import
 two modules which are :
\end_layout

\begin_layout Enumerate
The 
\series bold
PyTango
\series default
 module which is the Python to C++ interface
\end_layout

\begin_layout Enumerate
The Python classical 
\series bold
sys
\series default
 module
\end_layout

\begin_layout Standard
This could be done with code like (supposing the PYTHONPATH environment
 variable is correctly set)
\end_layout

\begin_layout LyX-Code
1 
\end_layout

\begin_layout LyX-Code
2 import PyTango
\end_layout

\begin_layout LyX-Code
3 import sys
\end_layout

\begin_layout LyX-Code

\end_layout

\begin_layout Subsection
The main part of a Python device server
\end_layout

\begin_layout Standard
The rule of this part of a Tango device server is to:
\end_layout

\begin_layout Itemize
Create the PyUtil object passing it the Python interpreter command line
 arguments
\end_layout

\begin_layout Itemize
Add to this object the list of Tango class(es) which have to be hosted by
 this interpreter
\end_layout

\begin_layout Itemize
Initialise the device server
\end_layout

\begin_layout Itemize
Run the device server loop
\end_layout

\begin_layout Standard
The following is a typical code for this main function
\end_layout

\begin_layout LyX-Code
     1                                    
\end_layout

\begin_layout LyX-Code
     2  if __name__ == '__main__':
\end_layout

\begin_layout LyX-Code
     3     py = PyTango.PyUtil(sys.argv)
\end_layout

\begin_layout LyX-Code
     4     py.add_TgClass(PyDsExpClass,PyDsExp,'PyDsExp')
\end_layout

\begin_layout LyX-Code
     5  
\end_layout

\begin_layout LyX-Code
     6     U = PyTango.Util.instance()
\end_layout

\begin_layout LyX-Code
     7     U.server_init()
\end_layout

\begin_layout LyX-Code
     8     U.server_run()
\end_layout

\begin_layout LyX-Code

\end_layout

\begin_layout Standard
Line 3 : Create the PyUtil object passing it the interpreter command line
 arguments
\newline
Line 4 : Add the Tango class 'PyDsExp' to the device server.
 The 
\emph on
add_TgClass()
\emph default
 method of the PyUtil class has three arguments which are the Tango class
 PyDsExpClass instance, the Tango PyDsExp instance and the Tango class name
\newline
Line
 7 : Initialise the Tango device server
\newline
Line 8 : Run the device server loop
\end_layout

\begin_layout Subsection
The PyDsExpClass class in Python
\end_layout

\begin_layout Standard
The rule of this class is to :
\end_layout

\begin_layout Itemize
Host and manage data you have only once for the Tango class whatever devices
 of this class will be created
\end_layout

\begin_layout Itemize
Define Tango class command(s)
\end_layout

\begin_layout Itemize
Define Tango class attribute(s)
\end_layout

\begin_layout Standard
In our example, the code of this Python class looks like:
\end_layout

\begin_layout LyX-Code
     1  class PyDsExpClass(PyTango.PyDeviceClass):
\end_layout

\begin_layout LyX-Code
     2          
\end_layout

\begin_layout LyX-Code
     3      cmd_list = {'IOLong':[[PyTango.DevLong,"Number"],
\end_layout

\begin_layout LyX-Code
     4                            [PyTango.DevLong,"Number * 2"]],
\end_layout

\begin_layout LyX-Code
     5                  'IOStringArray':[[PyTango.DevVarStringArray,"Array
 of string"],
\end_layout

\begin_layout LyX-Code
     6                        [PyTango.DevVarStringArray,"This reversed array"]]
        
\end_layout

\begin_layout LyX-Code
     7                 }
\end_layout

\begin_layout LyX-Code
     8                  
\end_layout

\begin_layout LyX-Code
     9                 
\end_layout

\begin_layout LyX-Code
    10      attr_list = {'Long_attr':[[PyTango.DevLong,
\end_layout

\begin_layout LyX-Code
    11                                 PyTango.SCALAR,
\end_layout

\begin_layout LyX-Code
    12                                 PyTango.READ],
\end_layout

\begin_layout LyX-Code
    13                                {'min alarm':1000,'max alarm':1500}],
\end_layout

\begin_layout LyX-Code
    14                   'Short_attr_rw':[[PyTango.DevShort,
\end_layout

\begin_layout LyX-Code
    15                                     PyTango.SCALAR,
\end_layout

\begin_layout LyX-Code
    16                                     PyTango.READ_WRITE]]
\end_layout

\begin_layout LyX-Code
    17                } 
\end_layout

\begin_layout LyX-Code

\end_layout

\begin_layout LyX-Code

\end_layout

\begin_layout Standard
Line 1 : The PyDsExpClass class has to inherit from the PyTango.PyDeviceClass
 class 
\newline
Line 3 to 7 : Definition of the 
\series bold
cmd_list
\series default
 dictionnary defining commands.
 The IOLong command is defined at lines 3 and 4.
 The IOStringArray command is defined in line 5 and 6
\newline
Line 10 to 16 : Definition
 of the 
\series bold
attr_list
\series default
 dictionnary defining attributes.
 The Long_attr attribute is defined at lines 10 to 13 and the Short_attr_rw
 attribute is defined at lines 14 to 16
\end_layout

\begin_layout Standard
If you have something specific to do in the class constructor like initializing
 some specific data member, you will have to code a class constructor.
 An example of such a contructor is :
\end_layout

\begin_layout LyX-Code
1 class PyDsExpClass(PyTango.PyDeviceClass):
\end_layout

\begin_layout LyX-Code
2     def __init__(self,name):
\end_layout

\begin_layout LyX-Code
3        PyTango.PyDeviceClass.__init__(self,name)
\end_layout

\begin_layout LyX-Code
4        self.set_type("TestDevice")
\end_layout

\begin_layout Standard
The device type is set at line 4.
\end_layout

\begin_layout LyX-Code

\end_layout

\begin_layout Subsubsection
Defining commands
\begin_inset LatexCommand label
name "sub:Defining-commands"

\end_inset


\end_layout

\begin_layout Standard
As shown in the previous example, commands have to be defined in a dictionary
 called 
\series bold
cmd_list
\series default
 as a data member of the xxxClass class of the Tango class.
 This dictionary has one element per command.
 The element key is the command name.
 The element value is a Python list which defines the command.
 The generic form of a command definition is
\begin_inset ERT
status collapsed

\begin_layout Standard


\backslash
begin{center}
\end_layout

\begin_layout Standard

\end_layout

\begin_layout Standard

\end_layout

\end_inset

'cmd_name':[[in_type,<"In desc">],[out_type,<"Out desc">],<{opt parameters}>]
\begin_inset ERT
status collapsed

\begin_layout Standard


\backslash
end{center}
\end_layout

\end_inset

The first element of the value list is itself a list with the command input
 data type (one of the PyTango.ArgType pseudo enumeration value) and optionally
 a string describing this input argument.
 The second element of the value list is also a list with the command output
 data type (one of the PyTango.ArgType pseudo enumeration value) and optionally
 a string describing it.
 These two elements are mandatory.
 The third list element is optional and allows additional command definition.
 The authorized element for this dictionary are summarized in the following
 array
\begin_inset ERT
status collapsed

\begin_layout Standard


\backslash
begin{center}
\end_layout

\end_inset

 
\begin_inset Tabular
<lyxtabular version="3" rows="4" columns="3">
<features>
<column alignment="center" valignment="top" leftline="true" width="0">
<column alignment="center" valignment="top" leftline="true" width="0">
<column alignment="center" valignment="top" leftline="true" rightline="true" width="0">
<row topline="true" bottomline="true">
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Standard
key
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Standard
value
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Standard
definition
\end_layout

\end_inset
</cell>
</row>
<row topline="true">
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Standard
"display level"
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Standard
PyTango.DispLevel enum value
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Standard
The command display level
\end_layout

\end_inset
</cell>
</row>
<row topline="true">
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Standard
"polling period"
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Standard
Any number
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Standard
The command polling period (mS)
\end_layout

\end_inset
</cell>
</row>
<row topline="true" bottomline="true">
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Standard
"default command"
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Standard
True or False
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Standard
To define that it is the default command
\end_layout

\end_inset
</cell>
</row>
</lyxtabular>

\end_inset


\end_layout

\begin_layout Standard
\begin_inset ERT
status collapsed

\begin_layout Standard


\backslash
end{center}
\end_layout

\end_inset


\end_layout

\begin_layout Subsubsection
Defining attributes
\begin_inset LatexCommand label
name "sub:Defining-attributes"

\end_inset


\end_layout

\begin_layout Standard
As shown in the previous example, attributes have to be defined in a dictionary
 called 
\series bold
attr_list
\series default
 as a data member of the xxxClass class of the Tango class.
 This dictionary has one element per attribute.
 The element key is the attribute name.
 The element value is a Python list which defines the attribute.
 The generic form of an attribute definition is
\begin_inset ERT
status collapsed

\begin_layout Standard


\backslash
begin{center}
\end_layout

\begin_layout Standard

\end_layout

\begin_layout Standard

\end_layout

\end_inset

'attr_name':[[mandatory parameters],<{opt parameters}>]
\begin_inset ERT
status collapsed

\begin_layout Standard


\backslash
end{center}
\end_layout

\end_inset

For any kind of attributes, the mandatory parameters are: 
\begin_inset ERT
status collapsed

\begin_layout Standard


\backslash
begin{center}
\end_layout

\end_inset

 [attr data type, attr data format, attr data R/W type]
\begin_inset ERT
status collapsed

\begin_layout Standard


\backslash
end{center}
\end_layout

\end_inset

 The attribute data type is one of the possible value for attributes of
 the PyTango.ArgType pseudo enunmeration.
 The attribute data format is one of the possible value of the PyTango.AttrDataFo
rmat pseudo enumeration and the attribute R/W type is one of the possible
 value of the PyTango.AttrWriteType pseudo enumeration.
 For spectrum attribute, you have to add the maximum X size (a number).
 For image attribute, you have to add the maximun X and Y dimension (two
 numbers).
 The authorized elements for the dictionnary defining optional parameters
 are summarized in the following array
\begin_inset ERT
status collapsed

\begin_layout Standard


\backslash
begin{center}
\end_layout

\end_inset


\begin_inset Tabular
<lyxtabular version="3" rows="18" columns="3">
<features>
<column alignment="center" valignment="top" leftline="true" width="0">
<column alignment="center" valignment="top" leftline="true" width="0">
<column alignment="center" valignment="top" leftline="true" rightline="true" width="0">
<row topline="true" bottomline="true">
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Standard
key
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Standard
value
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Standard
definition
\end_layout

\end_inset
</cell>
</row>
<row topline="true">
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Standard
"display level"
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Standard
PyTango.DispLevel enum value
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Standard
The attribute display level
\end_layout

\end_inset
</cell>
</row>
<row topline="true">
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Standard
"polling period"
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Standard
Any number
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Standard
The attribute polling period (mS)
\end_layout

\end_inset
</cell>
</row>
<row topline="true">
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Standard
"memorized"
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Standard
True or True_without_hard_applied
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Standard
Define if and how the att.
 is memorized
\end_layout

\end_inset
</cell>
</row>
<row topline="true">
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Standard
"label"
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Standard
A string
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Standard
The attribute label
\end_layout

\end_inset
</cell>
</row>
<row topline="true">
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Standard
"description"
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Standard
A string
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Standard
The attribute description
\end_layout

\end_inset
</cell>
</row>
<row topline="true">
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Standard
"unit"
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Standard
A string
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Standard
The attribute unit
\end_layout

\end_inset
</cell>
</row>
<row topline="true">
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Standard
"standard unit"
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Standard
A number
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Standard
The attribute standard unit
\end_layout

\end_inset
</cell>
</row>
<row topline="true">
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Standard
"display unit"
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Standard
A string
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Standard
The attribute display unit
\end_layout

\end_inset
</cell>
</row>
<row topline="true">
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Standard
"format"
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Standard
A string
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Standard
The attribute display format
\end_layout

\end_inset
</cell>
</row>
<row topline="true">
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Standard
"max value"
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Standard
A number
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Standard
The attribute max value
\end_layout

\end_inset
</cell>
</row>
<row topline="true" bottomline="true">
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Standard
"min value"
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Standard
A number
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Standard
The attribute min value
\end_layout

\end_inset
</cell>
</row>
<row bottomline="true">
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Standard
"max alarm"
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Standard
A number
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Standard
The attribute max alarm
\end_layout

\end_inset
</cell>
</row>
<row bottomline="true">
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Standard
"min alarm"
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Standard
A number
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Standard
The attribute min alarm
\end_layout

\end_inset
</cell>
</row>
<row bottomline="true">
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Standard
"min warning"
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Standard
A number
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Standard
The attribute min warning
\end_layout

\end_inset
</cell>
</row>
<row bottomline="true">
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Standard
"max warning"
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Standard
A number
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Standard
The attribute max warning
\end_layout

\end_inset
</cell>
</row>
<row bottomline="true">
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Standard
"delta time"
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Standard
A number
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Standard
The attribute RDS alarm delta time
\end_layout

\end_inset
</cell>
</row>
<row bottomline="true">
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Standard
"delta val"
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Standard
A number
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Standard
The attribute RDS alarm delta val
\end_layout

\end_inset
</cell>
</row>
</lyxtabular>

\end_inset


\end_layout

\begin_layout Standard
\begin_inset ERT
status collapsed

\begin_layout Standard


\backslash
end{center}
\end_layout

\end_inset


\end_layout

\begin_layout Subsection
The PyDsExp class in Python
\end_layout

\begin_layout Standard
The rule of this class is to implement methods executed by commands and
 attributes.
 In our example, the code of this class looks like :
\end_layout

\begin_layout LyX-Code
     1  class PyDsExp(PyTango.Device_3Impl):
\end_layout

\begin_layout LyX-Code
     2      def __init__(self,cl,name):
\end_layout

\begin_layout LyX-Code
     3          PyTango.Device_3Impl.__init__(self,cl,name)
\end_layout

\begin_layout LyX-Code
     4          print 'In PyDsExp __init__'
\end_layout

\begin_layout LyX-Code
     5          PyDsExp.init_device(self)
\end_layout

\begin_layout LyX-Code
     6                  
\end_layout

\begin_layout LyX-Code
     7      def init_device(self):
\end_layout

\begin_layout LyX-Code
     8          print 'In Python init_device method'
\end_layout

\begin_layout LyX-Code
     9          self.set_state(PyTango.DevState.ON)
\end_layout

\begin_layout LyX-Code
    10          self.attr_short_rw = 66
\end_layout

\begin_layout LyX-Code
    11          self.attr_long = 1246
\end_layout

\begin_layout LyX-Code
    12  
\end_layout

\begin_layout LyX-Code
    13  #------------------------------------------------------------------
     
\end_layout

\begin_layout LyX-Code
    14  
\end_layout

\begin_layout LyX-Code
    15      def delete_device(self):
\end_layout

\begin_layout LyX-Code
    16          print "[Device delete_device method] for device",self.get_name()
\end_layout

\begin_layout LyX-Code
    17          
\end_layout

\begin_layout LyX-Code
    18  #------------------------------------------------------------------
     
\end_layout

\begin_layout LyX-Code
    19          
\end_layout

\begin_layout LyX-Code
    20      def is_IOLong_allowed(self):
\end_layout

\begin_layout LyX-Code
    21          if self.get_state() == PyTango.DevState.ON:
\end_layout

\begin_layout LyX-Code
    22              return True
\end_layout

\begin_layout LyX-Code
    23          else:
\end_layout

\begin_layout LyX-Code
    24              return False
\end_layout

\begin_layout LyX-Code
    25              
\end_layout

\begin_layout LyX-Code
    26      def IOLong(self,in_data):
\end_layout

\begin_layout LyX-Code
    27          print "[IOLong::execute] received number",in_data
\end_layout

\begin_layout LyX-Code
    28          return in_data * 2;
\end_layout

\begin_layout LyX-Code
    29          
\end_layout

\begin_layout LyX-Code
    30  #------------------------------------------------------------------
     
\end_layout

\begin_layout LyX-Code
    31          
\end_layout

\begin_layout LyX-Code
    32      def is_IOStringArray_allowed(self):
\end_layout

\begin_layout LyX-Code
    33          if self.get_state() == PyTango.DevState.ON:
\end_layout

\begin_layout LyX-Code
    34              return True
\end_layout

\begin_layout LyX-Code
    35          else:
\end_layout

\begin_layout LyX-Code
    36              return False
\end_layout

\begin_layout LyX-Code
    37              
\end_layout

\begin_layout LyX-Code
    38      def IOStringArray(self,in_data):
\end_layout

\begin_layout LyX-Code
    39          out_data=in_data
\end_layout

\begin_layout LyX-Code
    40          out_data.reverse()
\end_layout

\begin_layout LyX-Code
    41          return out_data 
\end_layout

\begin_layout LyX-Code
    42          
\end_layout

\begin_layout LyX-Code
    43  #------------------------------------------------------------------
\end_layout

\begin_layout LyX-Code
    44  
\end_layout

\begin_layout LyX-Code
    45      def read_attr_hardware(self,data):
\end_layout

\begin_layout LyX-Code
    46          print 'In read_attr_hardware'
\end_layout

\begin_layout LyX-Code
    47  
\end_layout

\begin_layout LyX-Code
    48  #------------------------------------------------------------------
\end_layout

\begin_layout LyX-Code
    49  
\end_layout

\begin_layout LyX-Code
    50      def read_Long_attr(self,the_att):
\end_layout

\begin_layout LyX-Code
    51          print "[PyDsExp::read_attr] attribute name Long_attr"
\end_layout

\begin_layout LyX-Code
    52          the_att.set_value(self.attr_long)
\end_layout

\begin_layout LyX-Code
    53  
\end_layout

\begin_layout LyX-Code
    54  #------------------------------------------------------------------
\end_layout

\begin_layout LyX-Code
    55  
\end_layout

\begin_layout LyX-Code
    56      def read_Short_attr_rw(self,the_att):
\end_layout

\begin_layout LyX-Code
    57          print "[PyDsExp::read_attr] attribute name Short_attr_rw"
\end_layout

\begin_layout LyX-Code
    58          the_att.set_value(self.attr_short_rw)
\end_layout

\begin_layout LyX-Code
    59          
\end_layout

\begin_layout LyX-Code
    60  #------------------------------------------------------------------
\end_layout

\begin_layout LyX-Code
    61  
\end_layout

\begin_layout LyX-Code
    62      def write_Short_attr_rw(self,the_att):
\end_layout

\begin_layout LyX-Code
    63          print "In write_Short_attr_rw for attribute ",the_att.get_name()
\end_layout

\begin_layout LyX-Code
    64          data=[]
\end_layout

\begin_layout LyX-Code
    65          the_att.get_write_value(data)
\end_layout

\begin_layout LyX-Code
    66          self.attr_short_rw = data[0]
\end_layout

\begin_layout LyX-Code

\end_layout

\begin_layout LyX-Code

\end_layout

\begin_layout Standard
Line 1 : The PyDsExp class has to inherit from the PyTango.Device_3Impl
\newline
Line
 2 to 5 : PyDsExp class constructor.
 Note that at line 5, it calls the 
\emph on
init_device()
\emph default
 method
\newline
Line 7 to 11 : The 
\emph on
init_device()
\emph default
 method.
 It sets the device state (line 9) and initialises some data members
\newline
Line
 15 to 16 : The 
\emph on
delete_device()
\emph default
 method.
 This method is not mandatory.
 You define it only if you have to do something specific before the device
 is destroyed
\newline
Line 20 to 28 : The two methods for the IOLong command.
 The first method is called is_IOLong_allowed() and it is the command is_allowed
 method (line 20 to 24).
 The second method has the same name than the command name.
 It is the method which executes the command.
 The command input data type is a Tango long and therefore, this method
 receives a Python integer.
\newline
Line 32 to 41 : The two methods for the IOStringArray
 command.
 The first method is its is_allowed method (Line 32 to 36).
 The second one is the command execution method (Line 38 to 41).
 The command input data type is a String array.
 Therefore, the method receives the array in a Python list of Python strings.
\newline
Line
 45 to 46 : The 
\emph on
read_attr_hardware()
\emph default
 method.
 Its argument is a Python list of Python integer.
\newline
Line 50 to 52 : The method
 executed when the Long_attr attribute is read.
 Note that it sets the attribute value with the 
\emph on
PyTango.set_attribute_value()
\emph default
 function.
\newline
Line 56 to 58 : The method executed when the Short_attr_rw attribute
 is read.
\newline
Line 62 to 66 : The method executed when the Short_attr_rw attribute
 is written.
 It gets the attribute value with a call to the Attribute method 
\emph on
get_write_value()
\emph default
 with a list as argument.
\end_layout

\begin_layout Subsubsection
General methods
\end_layout

\begin_layout Standard
The following array summarizes how the general methods we have in a Tango
 device server are implemented in Python.
\begin_inset ERT
status collapsed

\begin_layout Standard


\backslash
begin{center}
\end_layout

\end_inset


\begin_inset Tabular
<lyxtabular version="3" rows="6" columns="4">
<features>
<column alignment="center" valignment="top" leftline="true" width="0">
<column alignment="center" valignment="top" leftline="true" width="0">
<column alignment="center" valignment="top" leftline="true" width="0">
<column alignment="center" valignment="top" leftline="true" rightline="true" width="0">
<row topline="true" bottomline="true">
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Standard
Name
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Standard
Input par (with "self")
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Standard
return value
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Standard
mandatory
\end_layout

\end_inset
</cell>
</row>
<row topline="true">
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Standard
init_device
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Standard
None
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Standard
None
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Standard
Yes
\end_layout

\end_inset
</cell>
</row>
<row topline="true">
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Standard
delete_device
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Standard
None
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Standard
None
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Standard
No
\end_layout

\end_inset
</cell>
</row>
<row topline="true">
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Standard
always_executed_hook
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Standard
None
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Standard
None
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Standard
No
\end_layout

\end_inset
</cell>
</row>
<row topline="true" bottomline="true">
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Standard
signal_handler
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Standard
Python integer
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Standard
None
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Standard
No
\end_layout

\end_inset
</cell>
</row>
<row bottomline="true">
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Standard
read_attr_hardware
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Standard
Python list of integer
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Standard
None
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Standard
No
\end_layout

\end_inset
</cell>
</row>
</lyxtabular>

\end_inset


\begin_inset ERT
status collapsed

\begin_layout Standard


\backslash
end{center}
\end_layout

\end_inset


\end_layout

\begin_layout Subsubsection
Implementing a command
\end_layout

\begin_layout Standard
Commands are defined as described in chapter 
\begin_inset LatexCommand ref
reference "sub:Defining-commands"

\end_inset

.
 Nevertheless, some methods implementing them have to be written.
 These methods names are fixed and depend on command name.
 They have to be called 
\begin_inset ERT
status collapsed

\begin_layout Standard


\backslash
begin{center}
\end_layout

\end_inset


\series bold
is_<Cmd_name>_allowed
\series default
 and 
\series bold
<Cmd_name>
\series default

\begin_inset ERT
status collapsed

\begin_layout Standard


\backslash
end{center}
\end_layout

\end_inset

 For instance, with a command called MyCmd, its is_allowed method has to
 be called is_MyCmd_allowed and its execution method has to be called simply
 MyCmd.
 The following array gives some more info on these methods.
\begin_inset ERT
status collapsed

\begin_layout Standard


\backslash
begin{center}
\end_layout

\end_inset


\begin_inset Tabular
<lyxtabular version="3" rows="3" columns="4">
<features>
<column alignment="center" valignment="top" leftline="true" width="0">
<column alignment="center" valignment="top" leftline="true" width="0">
<column alignment="center" valignment="top" leftline="true" width="0">
<column alignment="center" valignment="top" leftline="true" rightline="true" width="0">
<row topline="true" bottomline="true">
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Standard
Name
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Standard
Input par (with "self")
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Standard
return value
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Standard
mandatory
\end_layout

\end_inset
</cell>
</row>
<row topline="true">
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Standard
is_<Cmd_name>_allowed
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Standard
None
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Standard
Python boolean
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Standard
No
\end_layout

\end_inset
</cell>
</row>
<row topline="true" bottomline="true">
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Standard
Cmd_name
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Standard
Depends on cmd type
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Standard
Depends on cmd type
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Standard
Yes
\end_layout

\end_inset
</cell>
</row>
</lyxtabular>

\end_inset


\begin_inset ERT
status collapsed

\begin_layout Standard


\backslash
end{center}
\end_layout

\end_inset


\end_layout

\begin_layout Standard
Tango has more data types than Python which is more dynamic.
 How Tango data are transferred to Python method implementing commands is
 described in the following array:
\begin_inset ERT
status collapsed

\begin_layout Standard


\backslash
begin{center}
\end_layout

\end_inset


\begin_inset Tabular
<lyxtabular version="3" rows="32" columns="2">
<features>
<column alignment="center" valignment="top" leftline="true" width="0">
<column alignment="center" valignment="top" leftline="true" rightline="true" width="0">
<row topline="true" bottomline="true">
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Standard
Tango data type
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Standard
Python type
\end_layout

\end_inset
</cell>
</row>
<row topline="true">
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Standard
DEV_VOID
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Standard
No data
\end_layout

\end_inset
</cell>
</row>
<row topline="true">
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Standard
DEV_BOOLEAN
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Standard
A Python boolean
\end_layout

\end_inset
</cell>
</row>
<row topline="true">
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Standard
DEV_SHORT
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Standard
A Python integer
\end_layout

\end_inset
</cell>
</row>
<row topline="true">
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Standard
DEV_LONG
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Standard
A Python integer
\end_layout

\end_inset
</cell>
</row>
<row topline="true">
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Standard
DEV_LONG64
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Standard
A Python long integer on 32 bits computer
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Standard

\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Standard
or a Python integer on 64 bits computer
\end_layout

\end_inset
</cell>
</row>
<row topline="true">
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Standard
DEV_FLOAT
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Standard
A Python float
\end_layout

\end_inset
</cell>
</row>
<row topline="true">
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Standard
DEV_DOUBLE
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Standard
A Python float
\end_layout

\end_inset
</cell>
</row>
<row topline="true">
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Standard
DEV_USHORT
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Standard
A Python integer
\end_layout

\end_inset
</cell>
</row>
<row topline="true">
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Standard
DEV_ULONG
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Standard
A Python integer
\end_layout

\end_inset
</cell>
</row>
<row topline="true">
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Standard
DEV_ULONG64
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Standard
A Python long integer on 32 bits computer
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Standard

\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Standard
or a Python integet on 64 bits computer
\end_layout

\end_inset
</cell>
</row>
<row topline="true">
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Standard
DEV_STRING
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Standard
A python string - See Note
\end_layout

\end_inset
</cell>
</row>
<row topline="true">
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Standard
DEVVAR_CHARARRAY
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Standard
A Python list of Python integer - See Note
\end_layout

\end_inset
</cell>
</row>
<row topline="true">
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Standard
DEVVAR_SHORTARRAY
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Standard
A Python list of Python integer - See Note
\end_layout

\end_inset
</cell>
</row>
<row topline="true">
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Standard
DEVVAR_LONGARRAY
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Standard
A Python list of Python integer - See Note
\end_layout

\end_inset
</cell>
</row>
<row topline="true">
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Standard
DEVVAR_LONG64ARRAY
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Standard
A Python list of Python long integer on 32 bits
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Standard

\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Standard
or a Python list of Python integer on 64 bits
\end_layout

\end_inset
</cell>
</row>
<row topline="true">
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Standard
DEVVAR_FLOATARRAY
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Standard
A Python list of Python float - See Note
\end_layout

\end_inset
</cell>
</row>
<row topline="true">
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Standard
DEVVAR_DOUBLEARRAY
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Standard
A Python list of Python float - See Note
\end_layout

\end_inset
</cell>
</row>
<row topline="true">
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Standard
DEVVAR_USHORTARRAY
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Standard
A Python list of Python integer - See Note
\end_layout

\end_inset
</cell>
</row>
<row topline="true">
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Standard
DEVVAR_ULONGARRAY
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Standard
A Python list of Python integer - See Note
\end_layout

\end_inset
</cell>
</row>
<row topline="true">
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Standard
DEVVAR_ULONG64ARRAY
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Standard
A Python list of Python long integer on 32 bits
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Standard

\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Standard
or a Python list of Python integer on 64 bits
\end_layout

\end_inset
</cell>
</row>
<row topline="true">
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Standard
DEVVAR_STRINGARRAY
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Standard
A Python list of Python string - See Note
\end_layout

\end_inset
</cell>
</row>
<row topline="true">
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Standard

\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Standard
A Python tuple with two elements (See Note) :
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Standard
DEVVAR_LONGSTRINGARRAY
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Standard
1 - A Python list of Python integer
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Standard

\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Standard
2 - A Python list of Python string
\end_layout

\end_inset
</cell>
</row>
<row topline="true">
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Standard

\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Standard
A Python tuple with two elements (See Note) :
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Standard
DEVVAR_DOUBLESTRINGARRAY
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Standard
1 - A Python list of Python float
\end_layout

\end_inset
</cell>
</row>
<row bottomline="true">
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Standard

\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Standard
2 - A Python list of Python string
\end_layout

\end_inset
</cell>
</row>
</lyxtabular>

\end_inset


\begin_inset ERT
status collapsed

\begin_layout Standard


\backslash
end{center}
\end_layout

\end_inset


\end_layout

\begin_layout LyX-Code

\end_layout

\begin_layout Subsubsection
Implementing an attribute
\end_layout

\begin_layout Standard
Attributes are defined as described in chapter 
\begin_inset LatexCommand ref
reference "sub:Defining-attributes"

\end_inset

.
 Nevertheless, some methods implementing them have to be written.
 These methods names are fixed and depend on attribute name.
 They have to be called 
\begin_inset ERT
status collapsed

\begin_layout Standard


\backslash
begin{center}
\end_layout

\end_inset


\series bold
is_<Attr_name>_allowed
\series default
 and 
\series bold
read_<Attr_name>
\series default
 or/and 
\series bold
write_<Attr_name>
\series default

\begin_inset ERT
status collapsed

\begin_layout Standard


\backslash
end{center}
\end_layout

\end_inset

 For instance, with an attribute called MyAttr, its is_allowed method has
 to be called is_MyAttr_allowed, its read method has to be called read_MyAttr
 and its write method has to be called write_MyAttr.
 The following array gives some more info on these methods.
\begin_inset ERT
status collapsed

\begin_layout Standard


\backslash
begin{center}
\end_layout

\end_inset


\begin_inset Tabular
<lyxtabular version="3" rows="4" columns="4">
<features>
<column alignment="center" valignment="top" leftline="true" width="0">
<column alignment="center" valignment="top" leftline="true" width="0">
<column alignment="center" valignment="top" leftline="true" width="0">
<column alignment="center" valignment="top" leftline="true" rightline="true" width="0">
<row topline="true" bottomline="true">
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Standard
Name
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Standard
Input par (with self)
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Standard
return value
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Standard
mandatory
\end_layout

\end_inset
</cell>
</row>
<row topline="true">
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Standard
is_<Attr_name>_allowed
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Standard
Request type (AttReqType)
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Standard
Python boolean
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Standard
No
\end_layout

\end_inset
</cell>
</row>
<row topline="true" bottomline="true">
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Standard
read_<Attr_name>
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Standard
The attribute instance
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Standard
None
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Standard
Depend on Attr.
 type
\end_layout

\end_inset
</cell>
</row>
<row bottomline="true">
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Standard
write_<Attr_name>
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Standard
The attribute instance
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Standard
None
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Standard
Depend on Attr.
 type
\end_layout

\end_inset
</cell>
</row>
</lyxtabular>

\end_inset


\begin_inset ERT
status collapsed

\begin_layout Standard


\backslash
end{center}
\end_layout

\end_inset

Tango has more data types than Python which is more dynamic.
 How Tango data are transferred to Python method implementing attributes
 is described in the following array:
\begin_inset ERT
status collapsed

\begin_layout Standard


\backslash
begin{center}
\end_layout

\end_inset


\begin_inset Tabular
<lyxtabular version="3" rows="23" columns="3">
<features>
<column alignment="center" valignment="top" leftline="true" width="0">
<column alignment="center" valignment="top" leftline="true" width="0">
<column alignment="center" valignment="top" leftline="true" rightline="true" width="0">
<row topline="true" bottomline="true">
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Standard
Attr.
 data format
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Standard
Attr.
 data type
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Standard
Python type
\end_layout

\end_inset
</cell>
</row>
<row topline="true">
<cell alignment="center" valignment="top" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Standard

\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Standard
DEV_BOOLEAN
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Standard
Python boolean
\end_layout

\end_inset
</cell>
</row>
<row topline="true">
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Standard

\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Standard
DEV_UCHAR
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Standard
Python integer
\end_layout

\end_inset
</cell>
</row>
<row topline="true">
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Standard

\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Standard
DEV_SHORT
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Standard
Python integer
\end_layout

\end_inset
</cell>
</row>
<row topline="true">
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Standard

\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Standard
DEV_USHORT
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Standard
Python integer
\end_layout

\end_inset
</cell>
</row>
<row topline="true">
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Standard

\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Standard
DEV_LONG
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Standard
Python integer
\end_layout

\end_inset
</cell>
</row>
<row topline="true">
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Standard
SCALAR
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Standard
DEV_ULONG
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Standard
Python integer
\end_layout

\end_inset
</cell>
</row>
<row topline="true">
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Standard

\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Standard
DEV_LONG64
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Standard
Python integer (64 bits) or long integer (32 bits)
\end_layout

\end_inset
</cell>
</row>
<row topline="true">
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Standard

\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Standard
DEV_ULONG64
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Standard
Python integer (64 bits) or long integer (32 bits)
\end_layout

\end_inset
</cell>
</row>
<row topline="true">
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Standard

\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Standard
DEV_FLOAT
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Standard
Python float
\end_layout

\end_inset
</cell>
</row>
<row topline="true">
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Standard

\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Standard
DEV_DOUBLE
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Standard
Python float
\end_layout

\end_inset
</cell>
</row>
<row topline="true" bottomline="true">
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Standard

\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Standard
DEV_STRING
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Standard
Python string
\end_layout

\end_inset
</cell>
</row>
<row topline="true">
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Standard

\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Standard
DEV_BOOLEAN
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Standard
Python list of Python boolean
\end_layout

\end_inset
</cell>
</row>
<row topline="true">
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Standard

\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Standard
DEV_UCHAR
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Standard
Python list of Python integer
\end_layout

\end_inset
</cell>
</row>
<row topline="true">
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Standard

\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Standard
DEV_SHORT
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Standard
Python list of Python integer
\end_layout

\end_inset
</cell>
</row>
<row topline="true">
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Standard

\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Standard
DEV_USHORT
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Standard
Python list of Python integer
\end_layout

\end_inset
</cell>
</row>
<row topline="true">
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Standard
SPECTRUM
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Standard
DEV_LONG
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Standard
Python list of Python integer
\end_layout

\end_inset
</cell>
</row>
<row topline="true">
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Standard
or
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Standard
DEV_ULONG
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Standard
Python list of Python integer
\end_layout

\end_inset
</cell>
</row>
<row topline="true">
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Standard
IMAGE
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Standard
DEV_LONG64
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Standard
Python list of Python integer (64 bits) or Python long integer (32 bits)
\end_layout

\end_inset
</cell>
</row>
<row topline="true">
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Standard

\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Standard
DEV_ULONG64
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Standard
Python list of Python integer (64 bits) or Python long integer (32 bits)
\end_layout

\end_inset
</cell>
</row>
<row topline="true">
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Standard

\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Standard
DEV_FLOAT
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Standard
Python list of Python float
\end_layout

\end_inset
</cell>
</row>
<row topline="true">
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Standard

\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Standard
DEV_DOUBLE
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Standard
Python list of Python float
\end_layout

\end_inset
</cell>
</row>
<row topline="true" bottomline="true">
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Standard

\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Standard
DEV_STRING
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Standard
Python list of Python string
\end_layout

\end_inset
</cell>
</row>
</lyxtabular>

\end_inset


\end_layout

\begin_layout Standard
\begin_inset ERT
status collapsed

\begin_layout Standard


\backslash
end{center}
\end_layout

\end_inset


\end_layout

\begin_layout Standard

\end_layout

\begin_layout Standard
The following code is an example of how you write code executed when a client
 read an attribute which is called Long_attr
\end_layout

\begin_layout LyX-Code
1   def read_Long_attr(self,the_att):
\end_layout

\begin_layout LyX-Code
2      print "[PyDsExp::read_attr] attribute name Long_attr"
\end_layout

\begin_layout LyX-Code
3      the_att.set_value(self.attr_long)
\end_layout

\begin_layout Standard
Line 1 : Method declaration with "the_att" being an instance of the Attribute
 class representing the Long_attr attribute
\newline
Line 3 : Set the attribute value
 using the method 
\emph on
set_attribute_value()
\emph default
 with the attribute value as parameter
\end_layout

\begin_layout Standard
The following code is an example of how you write code executed when a client
 write the Short_attr_rw attribute
\end_layout

\begin_layout LyX-Code
1   def write_Short_attr_rw(self,the_att):
\end_layout

\begin_layout LyX-Code
2      print "In write_Short_attr_rw for attribute ",the_att.get_name()
\end_layout

\begin_layout LyX-Code
3      data=[]
\end_layout

\begin_layout LyX-Code
4      the_att.get_write_value(data)
\end_layout

\begin_layout LyX-Code
5      self.attr_short_rw = data[0]
\end_layout

\begin_layout Standard
Line 1 : Method declaration with "the_att" being an instance of the Attribute
 class representing the Short_attr_rw attribute
\newline
Line 3 : Define an empty
 Python list.
 This is needed even for scalar attribute to get the value sent by the client
\newline
Lin
e 4 : Get the value sent by the client using the method 
\emph on
get_write_value()
\emph default
 with the list defined previously as parameter.
 This list will be initialised with the value sent by the client.
\newline
Line 5 :
 Store the value written in the device object.
 Our attribute is a scalar attribute and its value is in the first element
 of the list.
\end_layout

\begin_layout Subsubsection
Dynamic attributes
\end_layout

\begin_layout Standard
It is also possible to create dynamic attributes within a Python device
 server.
 There are several ways to create dynamic attributes.
 One of the way, is to create all the devices within a loop, then to create
 the dynamic attributes and finally to make all the devices available for
 the external world.
 In C++ device server, this is typically done within the <Device>Class::device_f
actory() method.
 In Python device server, this method is generic and the user does not have
 one.
 Nevertheless, this generic device_factory method calls a method named 
\emph on
dyn_attr()
\emph default
 allowing the user to create his dynamic attributes.
 It is simply necessary to re-define this method within your <Device>Class
 and to create the dynamic attribute within this method
\end_layout

\begin_layout Itemize

\emph on
dyn_attr(self, dev_list)
\emph default
 : dev_list is a list containing all the devices created by the generic
 device_factory() method.
\end_layout

\begin_layout Standard
There is another point to be noted regarding dynamic attribute within Python
 device server.
 The Tango Python device server core checks that for each attribute it exists
 methods named <attribute_name>_read and/or <attribute_name>_write and/or
 is_<attribute_name>_allowed.
 Using dynamic attribute, it is not possible to define these methods because
 attributes name and number are known only at run-time.
 To address this issue, the Device_3Impl::add_attribute() method has a different
 signature for Python device server which is:
\end_layout

\begin_layout Itemize

\emph on
add_attribute(self, attr, r_meth = None, w_meth = None, is_allo_meth = None)
\emph default
 : attr is an instance of the Attr class, r_meth is the method which has
 to be executed with the attribute is read, w_meth is the method to be executed
 when the attribute is written and is_allo_meth is the method to be executed
 to implement the attribute state machine.
 The method passed here as argument as to be class method and not object
 method.
 Which argument you have to use depends on the type of the attribute (A
 WRITE attribute does not need a read method).
 Note, that depending on the number of argument you pass to this method,
 you may have to use Python keyword argument.
 The necessary methods required by the Tango Python device server core will
 be created automatically as a forward to the methods given as arguments.
\end_layout

\begin_layout Subsection
Tango C++ wrapped class usable in a Python device server
\end_layout

\begin_layout Standard
This chapter is not a precise definition of the method / functions parameters.
 In the PyTango module source distribution, there is an example of Python
 device server (DevTest.py) in its "test" directory where all these methods
 are used.
 They have exactly the same rules than the C++ one.
\end_layout

\begin_layout Subsubsection
The Util class
\end_layout

\begin_layout Standard
This class has the following wrapped methods available in Python script
\end_layout

\begin_layout Itemize

\emph on
instance()
\emph default
 which is a static method
\end_layout

\begin_layout Itemize

\emph on
server_init()
\end_layout

\begin_layout Itemize

\emph on
server_run()
\end_layout

\begin_layout Itemize

\emph on
set_serial_model()
\end_layout

\begin_layout Itemize

\emph on
get_device_by_name()
\end_layout

\begin_layout Itemize

\emph on
get_dserver_device()
\end_layout

\begin_layout Itemize

\emph on
get_device_list_by_class()
\end_layout

\begin_layout Itemize

\emph on
get_class_list()
\end_layout

\begin_layout Itemize

\emph on
trigger_cmd_polling()
\end_layout

\begin_layout Itemize

\emph on
trigger_attr_polling()
\end_layout

\begin_layout Standard
This class has the following static data members wrapped available in Python
 script
\end_layout

\begin_layout Itemize
_UseDb
\end_layout

\begin_layout Itemize
_FileDb
\end_layout

\begin_layout Subsubsection
The PyDeviceClass
\end_layout

\begin_layout Standard
This class has the following wrapped methods available in Python script
\end_layout

\begin_layout Itemize

\emph on
get_name()
\end_layout

\begin_layout Itemize

\emph on
get_device_list()
\end_layout

\begin_layout Itemize

\emph on
set_type()
\end_layout

\begin_layout Itemize

\emph on
register_signal()
\end_layout

\begin_layout Itemize

\emph on
unregister_signal()
\end_layout

\begin_layout Itemize

\emph on
signal_handler()
\end_layout

\begin_layout Itemize

\emph on
get_cvs_tag()
\end_layout

\begin_layout Itemize

\emph on
get_cvs_location()
\end_layout

\begin_layout Itemize

\emph on
add_wiz_dev_prop()
\end_layout

\begin_layout Itemize

\emph on
add_wiz_class_prop()
\end_layout

\begin_layout Itemize

\emph on
device_destroyer()
\end_layout

\begin_layout Itemize

\emph on
dyn_attr()
\emph default
 : Python specific
\end_layout

\begin_layout Subsubsection
The Device_3Impl class
\end_layout

\begin_layout Standard
This class has the following wrapped methods available in Python script
\end_layout

\begin_layout Itemize

\emph on
set_state()
\end_layout

\begin_layout Itemize

\emph on
get_state()
\end_layout

\begin_layout Itemize

\emph on
dev_state()
\end_layout

\begin_layout Itemize

\emph on
set_status()
\end_layout

\begin_layout Itemize

\emph on
get_status()
\end_layout

\begin_layout Itemize

\emph on
dev_status()
\end_layout

\begin_layout Itemize

\emph on
get_name()
\end_layout

\begin_layout Itemize

\emph on
get_device_attr()
\end_layout

\begin_layout Itemize

\emph on
get_device_class()
\end_layout

\begin_layout Itemize

\emph on
register_signal()
\end_layout

\begin_layout Itemize

\emph on
unregister_signal()
\end_layout

\begin_layout Itemize

\emph on
signal_handler()
\end_layout

\begin_layout Itemize

\emph on
set_change_event()
\end_layout

\begin_layout Itemize

\emph on
set_archive_event()
\end_layout

\begin_layout Itemize

\emph on
push_change_event()
\end_layout

\begin_layout Itemize

\emph on
push_archive_event()
\end_layout

\begin_layout Itemize

\emph on
push_event()
\end_layout

\begin_layout Itemize

\emph on
add_attribute()
\end_layout

\begin_layout Itemize

\emph on
remove_attribute()
\end_layout

\begin_layout Subsubsection
The MultiAttribute class
\end_layout

\begin_layout Standard
This class has the following wrapped methods available in Python script
\end_layout

\begin_layout Itemize

\emph on
get_w_attr_by_name()
\end_layout

\begin_layout Itemize

\emph on
get_w_attr_by_ind()
\end_layout

\begin_layout Itemize

\emph on
get_attr_by_name()
\end_layout

\begin_layout Itemize

\emph on
get_attr_by_ind()
\end_layout

\begin_layout Subsubsection
The Attribute class
\end_layout

\begin_layout Standard
This class has the following wrapped methods available in Python script
\end_layout

\begin_layout Itemize

\emph on
get_name()
\end_layout

\begin_layout Itemize

\emph on
set_quality()
\end_layout

\begin_layout Itemize

\emph on
check_alarm()
\end_layout

\begin_layout Itemize

\emph on
set_value()
\end_layout

\begin_layout Itemize

\emph on
set_value_date_quality()
\end_layout

\begin_layout Subsubsection
The WAttribute class
\end_layout

\begin_layout Standard
This class inherits from the Attribute class.
 It has the following wrapped methods available in Python script
\end_layout

\begin_layout Itemize

\emph on
get_write_value_length()
\end_layout

\begin_layout Itemize

\emph on
get_write_value()
\end_layout

\begin_layout Itemize

\emph on
set_write_value()
\end_layout

\begin_deeper
\begin_layout Itemize
New in PyTango 3.0.4: Added support for SPECTRUM and IMAGE
\end_layout

\end_deeper
\begin_layout Subsubsection
The UserDefaultAttrProp class
\end_layout

\begin_layout Standard
This class has the following wrapped methods available in Python script
\end_layout

\begin_layout Itemize

\emph on
set_label()
\end_layout

\begin_layout Itemize

\emph on
set_description()
\end_layout

\begin_layout Itemize

\emph on
set_format()
\end_layout

\begin_layout Itemize

\emph on
set_unit()
\end_layout

\begin_layout Itemize

\emph on
set_standard_unit()
\end_layout

\begin_layout Itemize

\emph on
set_display_unit()
\end_layout

\begin_layout Itemize

\emph on
set_min_value()
\end_layout

\begin_layout Itemize

\emph on
set_max_value()
\end_layout

\begin_layout Itemize

\emph on
set_min_alarm()
\end_layout

\begin_layout Itemize

\emph on
set_max_alarm()
\end_layout

\begin_layout Itemize

\emph on
set_min_warning()
\end_layout

\begin_layout Itemize

\emph on
set_max_warning()
\end_layout

\begin_layout Itemize

\emph on
set_delta_t()
\end_layout

\begin_layout Itemize

\emph on
set_delta_val()
\end_layout

\begin_layout Itemize

\emph on
set_abs_change()
\end_layout

\begin_layout Itemize

\emph on
set_rel_change()
\end_layout

\begin_layout Itemize

\emph on
set_period()
\end_layout

\begin_layout Itemize

\emph on
set_archive_abs_change()
\end_layout

\begin_layout Itemize

\emph on
set_archive_rel_change()
\end_layout

\begin_layout Itemize

\emph on
set_archive_period()
\end_layout

\begin_layout Subsubsection
The Attr class
\end_layout

\begin_layout Standard
This class has the following wrapped methods available in Python script
\end_layout

\begin_layout Itemize

\emph on
set_default_properties()
\end_layout

\begin_layout Itemize

\emph on
get_name()
\end_layout

\begin_layout Subsubsection
The SpectrumAttr class
\end_layout

\begin_layout Standard
This class inherits from the Attr class
\end_layout

\begin_layout Subsubsection
The Image Attr class
\end_layout

\begin_layout Standard
This class inherits from the SpectrumAttr class
\end_layout

\begin_layout Subsubsection
The DServer class
\end_layout

\begin_layout Standard
This class inherits from the Device_3Impl class
\end_layout

\begin_layout Subsection
Python API available in the PyTango module
\end_layout

\begin_layout Standard
In adition to the C++ extension API, the PyTango module contains a python
 based API intended to provide some usefull information as well as some
 utility features.
\end_layout

\begin_layout Subsubsection
The PyTango module
\end_layout

\begin_layout Standard
The PyTango module contains some version related information implemented
 as a set of module members:
\end_layout

\begin_layout Itemize
__doc__: the module documentation (=Release.long_description)
\end_layout

\begin_layout Itemize
__version__: the module version (=Release.version)
\end_layout

\begin_layout Itemize
__version_number__: the module version number (=Release.version_number)
\end_layout

\begin_layout Itemize
__version_description__: a brief description about the current release (=Release.
version_description)
\end_layout

\begin_layout Itemize
__author__ : a string with the list of all the authors
\end_layout

\begin_layout Standard
This information is new in PyTango 3.0.4
\end_layout

\begin_layout Subsubsection
The Release class
\end_layout

\begin_layout Standard
This class is intended to provide version related information.
 It is new in PyTango 3.0.4.
 It contains no methods, only the following static members:
\end_layout

\begin_layout Itemize
name: a string with the module name
\end_layout

\begin_layout Itemize
version: a string with the current version in the format x.y.z.
 Ex.: '3.0.4'
\end_layout

\begin_layout Itemize
version_number: an integer representing the version number.
 Ex.: 304
\end_layout

\begin_layout Itemize
version_description: a string with information about the current release.
\end_layout

\begin_layout Itemize
description: a string with a brief description about the PyTango module
\end_layout

\begin_layout Itemize
long_description: a string with the complete description of the PyTango
 module
\end_layout

\begin_layout Itemize
authors: a dict containning the authors
\end_layout

\begin_layout Itemize
url: a string with the official tango URL 
\end_layout

\begin_layout Itemize
download_url: a string with the URL for downloading the latest release
\end_layout

\begin_layout Itemize
platform: list of platforms where PyTango works
\end_layout

\begin_layout Itemize
keywords: list of related key words 
\end_layout

\begin_layout Subsubsection
The PyUtil class
\end_layout

\begin_layout Standard
This class inherit from the Util class.
 It has the following methods
\end_layout

\begin_layout Itemize

\emph on
PyUtil()
\emph default
 : Its constructor with the interpreter command line arguments as parameter
\end_layout

\begin_layout Itemize

\emph on
add_TgClass()
\emph default
 : Add a Python Tango class to the device server.
 This method has three parameters which are :
\end_layout

\begin_deeper
\begin_layout Itemize
The Tango class xxxClass instance
\end_layout

\begin_layout Itemize
The Tango class xxx instance
\end_layout

\begin_layout Itemize
The Tango class name
\end_layout

\end_deeper
\begin_layout Itemize

\emph on
add_Cpp_TgClass()
\emph default
 : Add a C++ Tango class to the device server.
 This method has two parameters which are :
\end_layout

\begin_deeper
\begin_layout Itemize
The Tango class xxxClass name
\end_layout

\begin_layout Itemize
The Tango class name
\end_layout

\end_deeper
\begin_layout Subsection
Mixing Tango classes (Python and C++) in a Python Tango device server
\end_layout

\begin_layout Standard
Within the same python interpreter, it is possible to mix several Tango
 classes.
 Here is an example of the main function of a device server with two Tango
 classes called IRMiror and PLC
\end_layout

\begin_layout LyX-Code
     1                                    
\end_layout

\begin_layout LyX-Code
     2  if __name__ == '__main__':
\end_layout

\begin_layout LyX-Code
     3      py = PyTango.PyUtil(sys.argv)
\end_layout

\begin_layout LyX-Code
     4      py.add_TgClass(PLCClass,PLC,'PLC')
\end_layout

\begin_layout LyX-Code
     5      py.add_TgClass(IRMirrorClass,IRMirror,'IRMirror')
\end_layout

\begin_layout LyX-Code
     6  
\end_layout

\begin_layout LyX-Code
     7      U = PyTango.Util.instance()
\end_layout

\begin_layout LyX-Code
     8      U.server_init()
\end_layout

\begin_layout LyX-Code
     9      U.server_run()
\end_layout

\begin_layout LyX-Code

\end_layout

\begin_layout LyX-Code

\end_layout

\begin_layout Standard
Line 4 : The Tango class PLC is registered in the device server
\newline
Line 5 :
 The Tango class IRMirror is registered in the device server
\end_layout

\begin_layout Standard
It is also possible to add C++ Tango class in a Python device server as
 soon as:
\end_layout

\begin_layout Enumerate
The Tango class is in a shared library
\end_layout

\begin_layout Enumerate
It exist a C function to create the Tango class.
 
\end_layout

\begin_layout Standard
For a Tango class called 
\series bold
MyTgClass
\series default
, the shared library has to be called 
\series bold
MyTgClass.so
\series default
 and has to be in a directory listed in the LD_LIBRARY_PATH environment
 variable.
 The C function creating the Tango class has to be called 
\series bold
\emph on
_create_MyTgClass_class()
\series default
\emph default
 and has to take one parameter of type "char *" which is the Tango class
 name.
 Here is an example of the main function of the same device server than
 before but with one C++ Tango class called SerialLine
\end_layout

\begin_layout LyX-Code
     1                                    
\end_layout

\begin_layout LyX-Code
     2  if __name__ == '__main__':
\end_layout

\begin_layout LyX-Code
     3     py = PyTango.PyUtil(sys.argv)
\end_layout

\begin_layout LyX-Code
     4  
\end_layout

\begin_layout LyX-Code
     5     py.add_Cpp_TgClass('SerialLine','SerialLine')
\end_layout

\begin_layout LyX-Code
     6  
\end_layout

\begin_layout LyX-Code
     7     py.add_TgClass(PLCClass,PLC,'PLC')
\end_layout

\begin_layout LyX-Code
     8     py.add_TgClass(IRMirrorClass,IRMirror,'IRMirror')
\end_layout

\begin_layout LyX-Code
     9  
\end_layout

\begin_layout LyX-Code
    10     U = PyTango.Util.instance()
\end_layout

\begin_layout LyX-Code
    11     U.server_init()
\end_layout

\begin_layout LyX-Code
    12     U.server_run()
\end_layout

\begin_layout LyX-Code

\end_layout

\begin_layout Standard
Line 5 : The C++ class is registered in the device server
\newline
Line 7 and 8 :
 The two Python classes are registered in the device server
\end_layout

\begin_layout Subsection
Debugging a Python Tango device server using Eclipse/PyDev
\end_layout

\begin_layout Standard
Python debugger's are "pertubated" if the process you are debugging creates
 thread(s) without using the Python threading module.
 This is the case for Tango Python device server where threads are created
 by the Tango C++ API.
 If you are using the Eclipse PyDev plug-in, look at their Frequently Asked
 Questions (FAQ) WEB pages at http://pydev.sourceforge.net/faq.html and search
 for the question about CORBA program.
 Follow their two first advices (number 1 and 2) to keep a trace of the
 PyDev debugging hook and modify your main function like the following :
\end_layout

\begin_layout LyX-Code
 1 if __name__ == '__main__':
\end_layout

\begin_layout LyX-Code
 2     try:
\end_layout

\begin_layout LyX-Code
 3         PyTango.PyDev_debug(pydev_hook)
\end_layout

\begin_layout LyX-Code
 4     except:
\end_layout

\begin_layout LyX-Code
 5         print "Debugging is not available"
\end_layout

\begin_layout LyX-Code
 6 
\end_layout

\begin_layout LyX-Code
 7     py = PyTango.PyUtil(sys.argv)
\end_layout

\begin_layout LyX-Code
 8     py.add_TgClass(PLCClass,PLC,'PLC')
\end_layout

\begin_layout LyX-Code
 9     py.add_TgClass(IRMirrorClass,IRMirror,'IRMirror')
\end_layout

\begin_layout LyX-Code
10 
\end_layout

\begin_layout LyX-Code
11     U = PyTango.Util.instance()
\end_layout

\begin_layout LyX-Code
12     U.server_init()
\end_layout

\begin_layout LyX-Code
13     U.server_run()
\end_layout

\begin_layout Standard
Line 1 to 4 : Try to get the global variable "pydev_hook" defined in debugger
 and call function PyDev_debug of the PyTango with it.
 If this global is not defined because the script is not running under debugger
 control, print a message
\end_layout

\begin_layout Section
Exception Handling
\end_layout

\begin_layout Subsection
Exception definition
\end_layout

\begin_layout Standard
All the exceptions that can be thrown by the underlying Tango C++ API are
 available in the PyTango python module.
 Hence a user can catch one of the following exceptions: DevFailed, ConnectionFa
iled, CommunicationFailed, WrongNameSyntax, NonDbDevice, WrongData, NonSupported
Feature, EventSystemFailed.
 For a detailed meaning and description of the context in which they are
 thrown, please refer to the Tango control system documentation.
 When an exception is caught, the sys.exc_info() function returns a tuple
 of three values that give information about the exception that is currently
 being handled.
 The values returned are (type, value, traceback).
 Since most functions don't need access to the traceback, the best solution
 is to use something like exctype, value = sys.exc_info()[:2] to extract
 only the exception type and value.
 If one of the Tango exceptions is caught, the exctype will be class name
 of the exception (DevFailed, ..
 etc) and the value a tuple of dictionary objects all of which containing
 the following kind of key-value pairs: 
\end_layout

\begin_layout Itemize
reason: a string describing the error type (more readable than the associated
 error code) 
\end_layout

\begin_layout Itemize
desc: a string describing in plain text the reason of the error.
 
\end_layout

\begin_layout Itemize
origin: a string giving the name of the (C++ API) method which thrown the
 exception 
\end_layout

\begin_layout Itemize
severity: one of the strings WARN, ERR, PANIC giving severity level of the
 error.
\end_layout

\begin_layout Standard
\begin_inset ERT
status collapsed

\begin_layout Standard


\backslash
begin{example}
\end_layout

\begin_layout Standard


\backslash
begin{verbatim}
\end_layout

\begin_layout Standard

#  Protect the script from Exceptions raised by the Tango or python itself
\end_layout

\begin_layout Standard

try:
\end_layout

\begin_layout Standard

        # Get proxy on the tangotest1 device
\end_layout

\begin_layout Standard

        print "Getting DeviceProxy "
\end_layout

\begin_layout Standard

        tangotest = DeviceProxy("tango/tangotest/1")
\end_layout

\begin_layout Standard

#Catch Tango and Systems  Exceptions
\end_layout

\begin_layout Standard

except DevFailed:
\end_layout

\begin_layout Standard

        exctype , value = sys.exc
\backslash
_info()[:2]
\end_layout

\begin_layout Standard

        print "Failed with exception ! " , exctype
\end_layout

\begin_layout Standard

        for err in value:
\end_layout

\begin_layout Standard

                print " reason" , err["reason"]
\end_layout

\begin_layout Standard

                print " description" , err["desc"]
\end_layout

\begin_layout Standard

                print "origin" , err["origin"]
\end_layout

\begin_layout Standard

                print "severity" , err["severity"]
\end_layout

\begin_layout Standard


\backslash
end{verbatim}
\end_layout

\begin_layout Standard


\backslash
end{example}
\end_layout

\end_inset


\end_layout

\begin_layout Subsection
Throwing exception in a device server
\end_layout

\begin_layout Standard
The C++ Tango::Except class with its most important methods have been wrapped
 to Python.
 Threfore, in a Python device server, you have the following methods to
 throw, re-throw or print a Tango::DevFailed exception :
\end_layout

\begin_layout Itemize

\emph on
throw_exception()
\emph default
 which is a static method
\end_layout

\begin_layout Itemize

\emph on
re_throw_exception()
\emph default
 which is also a static method
\end_layout

\begin_layout Itemize

\emph on
print_exception()
\emph default
 which is also a static method
\end_layout

\begin_layout Standard
The following code is an example of a command method requesting a command
 on a sub-device and re-throwing the exception in case of:
\end_layout

\begin_layout LyX-Code
1   try:
\end_layout

\begin_layout LyX-Code
2      dev.command_inout("SubDevCommand")
\end_layout

\begin_layout LyX-Code
3   except PyTango.DevFailed,e:
\end_layout

\begin_layout LyX-Code
4      PyTango.Except.re_throw_exception(e,"MyClass_CommandFailed",
\end_layout

\begin_layout LyX-Code
5                                    "Sub device command SubdevCommand failed",
\end_layout

\begin_layout LyX-Code
6                                    "Command()")
\end_layout

\begin_layout Standard
Line 2 : Send the command to the sub device in a try/catch block
\newline
Line 4 -
 6 : Re-throw the exception and add a new level of information in the exception
 stack
\end_layout

\end_body
\end_document
