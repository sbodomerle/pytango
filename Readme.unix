Installing boost and Generating PyTango module (release 3.0 and more)
---------------------------------------------------------------------

Rem : PyTango V3.0.3 requires Tango V6.0 or above and Python 2.4 or above
Rem : PyTango V3 requires Tango V5.5 or above and Python 2.4 or above


The Tango python binding uses boost.python library to generate the 
PyTango module.
To produce this PyTango module from the source code you have to

1- Download boost libraries source code from:
   
   http://www.boost.org
   
   and unpack it. It is not necessary to build it now.
   PyTango V3 has been developped using Boost 1.33.1

   Note: As of Boost 1.34.0 the Boost.Build system has been changed to v2.
   Some of the required steps to build PyTango differ if you are using v1 
   or v2. It is expected that Boost will abandon its v1 build system, so in
   future versions of PyTango, support for the v1 build system is not
   guaranteed.

2- To generate boost.python lib and PyTango module, you
   need the Boost building tool called "bjam".
   It is available as binary for different platform at
   
   http://sourceforge.net/project/showfiles.php?group_id=7586&package_id=72941
   
   Install it and add bjam to your PATH environment variable.
   PyTango V3 has been developped using bjam 3.1.11-1
   
3- Update the src/boost-build.jam file in order to set
   the "boost-build" definition to the directory where 
   bjam will find some files it needs. Most of the times, it is
   
   1 - with Boost.build v1:
   <BOOST_unpack_dir>/tools/build/v1

   2 - with Boost.build v2:
   <BOOST_unpack_dir>/tools/build/v2

4- Update the src/Jamrules file. The BOOST_ROOT variable
   should be set to the directory where you unpack boost
   (<BOOST_unpack_dir>)

   Also if you have both Python 2.4 and 2.5 installed on your system it might
   be a good idea to uncomment the PYTHON_VERSION variable and set it to the
   proper version. Please note that the format for the possible values of this 
   variable is <major ver>.<minor ver> . I.e., 2.4 is valid but 2.4.1 is NOT 
   valid.

   4.1 - Additional step for Boost.build v2:
   Update the src/Jamroot file. The 'use-project boost' line should contain
   the directory where you unpack boost (<BOOST_unpack_dir>)

5- 1- with Boost.build v1:
   Create a link between a file called "Jamfile" and the existing file 
   Jamfile.unix in the src directory or simply rename the file
   Jamfile.unix to Jamfile

   2- with Boost.build v2:
   Create a link between a file called "Jamfile.v2" and the existing file 
   Jamfile.v2.unix in the src directory or simply rename the file
   Jamfile.v2.unix to Jamfile.v2
   
6- Define some environment variables needed at compile time

      OMNI_ROOT   should point to the directory where omniORB is installed
      TANGO_ROOT  should point to the directory where Tango is installed

7- Go the src directory and build boost.python library and PyTango module by
   typing

   1- with Boost.build v1:
     bjam -sTOOLS=gcc -sBUILD=release
   
   2- with Boost.build v1:
     bjam --v2 toolset=gcc variant=release
     
     go to the directory <BOOST_unpack_dir>/libs/python/build and type:
     bjam --v2 toolset=gcc variant=release

   Be sure to have bjam and python in your path). If all OK, it should create
   a "bin" directory in your "src" directory and you should have the 
   boost.python library in
       
   1- with Boost.build v1:
       bin/boost/libs/python/build/libboost_python.so/gcc/release/shared-linkable-true

   2- with Boost.build v2:
       <BOOST_unpack_dir>/bin.v2/libs/python/build/gcc-<version>/release
       
   and the PyTango module (a shared library in our case) in
   
   1- with Boost.build v1:
       bin/src/_PyTango.so/gcc/release/shared-linkable-true

   2- with Boost.build v2:
       bin/gcc-<version>/release


8- Build the python package. To do this, in a directory referenced in your PYTHONPATH,
   create a directory called PyTango. "cd" to this directory and copy there the 
   _PyTango.so shared library created in 7. Copy the Python module TgFactory
   and the small file __init__.py (from modules/TgFactory.py) in this same directory.
   
9- Add the directory where you install libboost_python.so to your LD_LIBRARY_PATH
   environment variable. Be sure to also have all Tango and omniORB libraries
   available in your LD_LIBRARY_PATH

You have some Python PyTango module usage example in the test directory (client
and server)
